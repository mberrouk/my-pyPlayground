from _typeshed import Incomplete
from collections.abc import Generator

__all__ = ['Media', 'MediaDefiningClass', 'Widget', 'TextInput', 'NumberInput', 'EmailInput', 'URLInput', 'PasswordInput', 'HiddenInput', 'MultipleHiddenInput', 'FileInput', 'ClearableFileInput', 'Textarea', 'DateInput', 'DateTimeInput', 'TimeInput', 'CheckboxInput', 'Select', 'NullBooleanSelect', 'SelectMultiple', 'RadioSelect', 'CheckboxSelectMultiple', 'MultiWidget', 'SplitDateTimeWidget', 'SplitHiddenDateTimeWidget', 'SelectDateWidget']

class MediaOrderConflictWarning(RuntimeWarning): ...

class Media:
    def __init__(self, media: Incomplete | None = None, css: Incomplete | None = None, js: Incomplete | None = None) -> None: ...
    def render(self): ...
    def render_js(self): ...
    def render_css(self): ...
    def absolute_path(self, path): ...
    def __getitem__(self, name): ...
    @staticmethod
    def merge(*lists): ...
    def __add__(self, other): ...

class MediaDefiningClass(type):
    def __new__(mcs, name, bases, attrs): ...

class Widget(metaclass=MediaDefiningClass):
    needs_multipart_form: bool
    is_localized: bool
    is_required: bool
    supports_microseconds: bool
    use_fieldset: bool
    attrs: Incomplete
    def __init__(self, attrs: Incomplete | None = None) -> None: ...
    def __deepcopy__(self, memo): ...
    @property
    def is_hidden(self): ...
    def subwidgets(self, name, value, attrs: Incomplete | None = None) -> Generator[Incomplete]: ...
    def format_value(self, value): ...
    def get_context(self, name, value, attrs): ...
    def render(self, name, value, attrs: Incomplete | None = None, renderer: Incomplete | None = None): ...
    def build_attrs(self, base_attrs, extra_attrs: Incomplete | None = None): ...
    def value_from_datadict(self, data, files, name): ...
    def value_omitted_from_data(self, data, files, name): ...
    def id_for_label(self, id_): ...
    def use_required_attribute(self, initial): ...

class Input(Widget):
    input_type: Incomplete
    template_name: str
    def __init__(self, attrs: Incomplete | None = None) -> None: ...
    def get_context(self, name, value, attrs): ...

class TextInput(Input):
    input_type: str
    template_name: str

class NumberInput(Input):
    input_type: str
    template_name: str

class EmailInput(Input):
    input_type: str
    template_name: str

class URLInput(Input):
    input_type: str
    template_name: str

class PasswordInput(Input):
    input_type: str
    template_name: str
    render_value: Incomplete
    def __init__(self, attrs: Incomplete | None = None, render_value: bool = False) -> None: ...
    def get_context(self, name, value, attrs): ...

class HiddenInput(Input):
    input_type: str
    template_name: str

class MultipleHiddenInput(HiddenInput):
    template_name: str
    def get_context(self, name, value, attrs): ...
    def value_from_datadict(self, data, files, name): ...
    def format_value(self, value): ...

class FileInput(Input):
    allow_multiple_selected: bool
    input_type: str
    needs_multipart_form: bool
    template_name: str
    def __init__(self, attrs: Incomplete | None = None) -> None: ...
    def format_value(self, value) -> None: ...
    def value_from_datadict(self, data, files, name): ...
    def value_omitted_from_data(self, data, files, name): ...
    def use_required_attribute(self, initial): ...

class ClearableFileInput(FileInput):
    clear_checkbox_label: Incomplete
    initial_text: Incomplete
    input_text: Incomplete
    template_name: str
    checked: bool
    def clear_checkbox_name(self, name): ...
    def clear_checkbox_id(self, name): ...
    def is_initial(self, value): ...
    def format_value(self, value): ...
    def get_context(self, name, value, attrs): ...
    def value_from_datadict(self, data, files, name): ...
    def value_omitted_from_data(self, data, files, name): ...

class Textarea(Widget):
    template_name: str
    def __init__(self, attrs: Incomplete | None = None) -> None: ...

class DateTimeBaseInput(TextInput):
    format_key: str
    supports_microseconds: bool
    format: Incomplete
    def __init__(self, attrs: Incomplete | None = None, format: Incomplete | None = None) -> None: ...
    def format_value(self, value): ...

class DateInput(DateTimeBaseInput):
    format_key: str
    template_name: str

class DateTimeInput(DateTimeBaseInput):
    format_key: str
    template_name: str

class TimeInput(DateTimeBaseInput):
    format_key: str
    template_name: str

class CheckboxInput(Input):
    input_type: str
    template_name: str
    check_test: Incomplete
    def __init__(self, attrs: Incomplete | None = None, check_test: Incomplete | None = None) -> None: ...
    def format_value(self, value): ...
    def get_context(self, name, value, attrs): ...
    def value_from_datadict(self, data, files, name): ...
    def value_omitted_from_data(self, data, files, name): ...

class ChoiceWidget(Widget):
    allow_multiple_selected: bool
    input_type: Incomplete
    template_name: Incomplete
    option_template_name: Incomplete
    add_id_index: bool
    checked_attribute: Incomplete
    option_inherits_attrs: bool
    def __init__(self, attrs: Incomplete | None = None, choices=()) -> None: ...
    def __deepcopy__(self, memo): ...
    def subwidgets(self, name, value, attrs: Incomplete | None = None) -> Generator[Incomplete, Incomplete]: ...
    def options(self, name, value, attrs: Incomplete | None = None) -> Generator[Incomplete, Incomplete]: ...
    def optgroups(self, name, value, attrs: Incomplete | None = None): ...
    def create_option(self, name, value, label, selected, index, subindex: Incomplete | None = None, attrs: Incomplete | None = None): ...
    def get_context(self, name, value, attrs): ...
    def id_for_label(self, id_, index: str = '0'): ...
    def value_from_datadict(self, data, files, name): ...
    def format_value(self, value): ...
    @property
    def choices(self): ...
    @choices.setter
    def choices(self, value) -> None: ...

class Select(ChoiceWidget):
    input_type: str
    template_name: str
    option_template_name: str
    add_id_index: bool
    checked_attribute: Incomplete
    option_inherits_attrs: bool
    def get_context(self, name, value, attrs): ...
    def use_required_attribute(self, initial): ...

class NullBooleanSelect(Select):
    def __init__(self, attrs: Incomplete | None = None) -> None: ...
    def format_value(self, value): ...
    def value_from_datadict(self, data, files, name): ...

class SelectMultiple(Select):
    allow_multiple_selected: bool
    def value_from_datadict(self, data, files, name): ...
    def value_omitted_from_data(self, data, files, name): ...

class RadioSelect(ChoiceWidget):
    input_type: str
    template_name: str
    option_template_name: str
    use_fieldset: bool
    def id_for_label(self, id_, index: Incomplete | None = None): ...

class CheckboxSelectMultiple(RadioSelect):
    allow_multiple_selected: bool
    input_type: str
    template_name: str
    option_template_name: str
    def use_required_attribute(self, initial): ...
    def value_omitted_from_data(self, data, files, name): ...

class MultiWidget(Widget):
    template_name: str
    use_fieldset: bool
    widgets_names: Incomplete
    widgets: Incomplete
    def __init__(self, widgets, attrs: Incomplete | None = None) -> None: ...
    @property
    def is_hidden(self): ...
    def get_context(self, name, value, attrs): ...
    def id_for_label(self, id_): ...
    def value_from_datadict(self, data, files, name): ...
    def value_omitted_from_data(self, data, files, name): ...
    def decompress(self, value) -> None: ...
    media: Incomplete
    def __deepcopy__(self, memo): ...
    @property
    def needs_multipart_form(self): ...

class SplitDateTimeWidget(MultiWidget):
    supports_microseconds: bool
    template_name: str
    def __init__(self, attrs: Incomplete | None = None, date_format: Incomplete | None = None, time_format: Incomplete | None = None, date_attrs: Incomplete | None = None, time_attrs: Incomplete | None = None) -> None: ...
    def decompress(self, value): ...

class SplitHiddenDateTimeWidget(SplitDateTimeWidget):
    template_name: str
    def __init__(self, attrs: Incomplete | None = None, date_format: Incomplete | None = None, time_format: Incomplete | None = None, date_attrs: Incomplete | None = None, time_attrs: Incomplete | None = None) -> None: ...

class SelectDateWidget(Widget):
    none_value: Incomplete
    month_field: str
    day_field: str
    year_field: str
    template_name: str
    input_type: str
    select_widget = Select
    date_re: Incomplete
    use_fieldset: bool
    attrs: Incomplete
    years: Incomplete
    months: Incomplete
    year_none_value: Incomplete
    month_none_value: Incomplete
    day_none_value: Incomplete
    def __init__(self, attrs: Incomplete | None = None, years: Incomplete | None = None, months: Incomplete | None = None, empty_label: Incomplete | None = None) -> None: ...
    def get_context(self, name, value, attrs): ...
    def format_value(self, value): ...
    def id_for_label(self, id_): ...
    def value_from_datadict(self, data, files, name): ...
    def value_omitted_from_data(self, data, files, name): ...

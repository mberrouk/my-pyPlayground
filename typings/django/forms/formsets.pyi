from _typeshed import Incomplete
from django.forms.forms import Form
from django.forms.utils import RenderableFormMixin
from django.forms.widgets import CheckboxInput, NumberInput

__all__ = ['BaseFormSet', 'formset_factory', 'all_valid']

class ManagementForm(Form):
    TOTAL_FORMS: Incomplete
    INITIAL_FORMS: Incomplete
    MIN_NUM_FORMS: Incomplete
    MAX_NUM_FORMS: Incomplete
    def clean(self): ...

class BaseFormSet(RenderableFormMixin):
    deletion_widget = CheckboxInput
    ordering_widget = NumberInput
    default_error_messages: Incomplete
    template_name_div: str
    template_name_p: str
    template_name_table: str
    template_name_ul: str
    is_bound: Incomplete
    prefix: Incomplete
    auto_id: Incomplete
    data: Incomplete
    files: Incomplete
    initial: Incomplete
    form_kwargs: Incomplete
    error_class: Incomplete
    form_renderer: Incomplete
    renderer: Incomplete
    error_messages: Incomplete
    def __init__(self, data: Incomplete | None = None, files: Incomplete | None = None, auto_id: str = 'id_%s', prefix: Incomplete | None = None, initial: Incomplete | None = None, error_class=..., form_kwargs: Incomplete | None = None, error_messages: Incomplete | None = None) -> None: ...
    def __iter__(self): ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def __bool__(self) -> bool: ...
    def management_form(self): ...
    def total_form_count(self): ...
    def initial_form_count(self): ...
    def forms(self): ...
    def get_form_kwargs(self, index): ...
    @property
    def initial_forms(self): ...
    @property
    def extra_forms(self): ...
    @property
    def empty_form(self): ...
    @property
    def cleaned_data(self): ...
    @property
    def deleted_forms(self): ...
    @property
    def ordered_forms(self): ...
    @classmethod
    def get_default_prefix(cls): ...
    @classmethod
    def get_deletion_widget(cls): ...
    @classmethod
    def get_ordering_widget(cls): ...
    def non_form_errors(self): ...
    @property
    def errors(self): ...
    def total_error_count(self): ...
    def is_valid(self): ...
    def full_clean(self) -> None: ...
    def clean(self) -> None: ...
    def has_changed(self): ...
    def add_fields(self, form, index) -> None: ...
    def add_prefix(self, index): ...
    def is_multipart(self): ...
    @property
    def media(self): ...
    @property
    def template_name(self): ...
    def get_context(self): ...

def formset_factory(form, formset=..., extra: int = 1, can_order: bool = False, can_delete: bool = False, max_num: Incomplete | None = None, validate_max: bool = False, min_num: Incomplete | None = None, validate_min: bool = False, absolute_max: Incomplete | None = None, can_delete_extra: bool = True, renderer: Incomplete | None = None): ...
def all_valid(formsets): ...

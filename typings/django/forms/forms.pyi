from _typeshed import Incomplete
from django.forms.utils import RenderableFormMixin
from django.forms.widgets import MediaDefiningClass

__all__ = ['BaseForm', 'Form']

class DeclarativeFieldsMetaclass(MediaDefiningClass):
    def __new__(mcs, name, bases, attrs): ...

class BaseForm(RenderableFormMixin):
    default_renderer: Incomplete
    field_order: Incomplete
    prefix: Incomplete
    use_required_attribute: bool
    template_name_div: str
    template_name_p: str
    template_name_table: str
    template_name_ul: str
    template_name_label: str
    is_bound: Incomplete
    data: Incomplete
    files: Incomplete
    auto_id: Incomplete
    initial: Incomplete
    error_class: Incomplete
    label_suffix: Incomplete
    empty_permitted: Incomplete
    fields: Incomplete
    renderer: Incomplete
    def __init__(self, data: Incomplete | None = None, files: Incomplete | None = None, auto_id: str = 'id_%s', prefix: Incomplete | None = None, initial: Incomplete | None = None, error_class=..., label_suffix: Incomplete | None = None, empty_permitted: bool = False, field_order: Incomplete | None = None, use_required_attribute: Incomplete | None = None, renderer: Incomplete | None = None) -> None: ...
    def order_fields(self, field_order) -> None: ...
    def __iter__(self): ...
    def __getitem__(self, name): ...
    @property
    def errors(self): ...
    def is_valid(self): ...
    def add_prefix(self, field_name): ...
    def add_initial_prefix(self, field_name): ...
    @property
    def template_name(self): ...
    def get_context(self): ...
    def non_field_errors(self): ...
    def add_error(self, field, error) -> None: ...
    def has_error(self, field, code: Incomplete | None = None): ...
    cleaned_data: Incomplete
    def full_clean(self) -> None: ...
    def clean(self): ...
    def has_changed(self): ...
    def changed_data(self): ...
    @property
    def media(self): ...
    def is_multipart(self): ...
    def hidden_fields(self): ...
    def visible_fields(self): ...
    def get_initial_for_field(self, field, field_name): ...

class Form(BaseForm, metaclass=DeclarativeFieldsMetaclass): ...

from _typeshed import Incomplete
from collections import UserList
from django.conf import settings as settings
from django.core.exceptions import ValidationError as ValidationError
from django.forms.renderers import get_default_renderer as get_default_renderer
from django.utils import timezone as timezone
from django.utils.html import escape as escape, format_html_join as format_html_join
from django.utils.safestring import mark_safe as mark_safe

def pretty_name(name): ...
def flatatt(attrs): ...

class RenderableMixin:
    def get_context(self) -> None: ...
    def render(self, template_name: Incomplete | None = None, context: Incomplete | None = None, renderer: Incomplete | None = None): ...
    __html__ = render

class RenderableFieldMixin(RenderableMixin):
    def as_field_group(self): ...
    def as_hidden(self) -> None: ...
    def as_widget(self) -> None: ...
    __html__: Incomplete

class RenderableFormMixin(RenderableMixin):
    def as_p(self): ...
    def as_table(self): ...
    def as_ul(self): ...
    def as_div(self): ...

class RenderableErrorMixin(RenderableMixin):
    def as_json(self, escape_html: bool = False): ...
    def as_text(self): ...
    def as_ul(self): ...

class ErrorDict(dict, RenderableErrorMixin):
    template_name: str
    template_name_text: str
    template_name_ul: str
    renderer: Incomplete
    def __init__(self, *args, renderer: Incomplete | None = None, **kwargs) -> None: ...
    def as_data(self): ...
    def get_json_data(self, escape_html: bool = False): ...
    def get_context(self): ...

class ErrorList(UserList, list, RenderableErrorMixin):
    template_name: str
    template_name_text: str
    template_name_ul: str
    error_class: str
    renderer: Incomplete
    def __init__(self, initlist: Incomplete | None = None, error_class: Incomplete | None = None, renderer: Incomplete | None = None) -> None: ...
    def as_data(self): ...
    def copy(self): ...
    def get_json_data(self, escape_html: bool = False): ...
    def get_context(self): ...
    def __contains__(self, item) -> bool: ...
    def __eq__(self, other): ...
    def __getitem__(self, i): ...
    def __reduce_ex__(self, *args, **kwargs): ...

def from_current_timezone(value): ...
def to_current_timezone(value): ...

from _typeshed import Incomplete
from django.conf import global_settings as global_settings
from django.core.exceptions import ImproperlyConfigured as ImproperlyConfigured
from django.utils.deprecation import RemovedInDjango60Warning as RemovedInDjango60Warning
from django.utils.functional import LazyObject as LazyObject, empty as empty

ENVIRONMENT_VARIABLE: str
DEFAULT_STORAGE_ALIAS: str
STATICFILES_STORAGE_ALIAS: str
FORMS_URLFIELD_ASSUME_HTTPS_DEPRECATED_MSG: str

class SettingsReference(str):
    def __new__(self, value, setting_name): ...
    setting_name: Incomplete
    def __init__(self, value, setting_name) -> None: ...

class LazySettings(LazyObject):
    def __getattr__(self, name): ...
    def __setattr__(self, name, value) -> None: ...
    def __delattr__(self, name) -> None: ...
    def configure(self, default_settings=..., **options) -> None: ...
    @property
    def configured(self): ...

class Settings:
    SETTINGS_MODULE: Incomplete
    def __init__(self, settings_module) -> None: ...
    def is_overridden(self, setting): ...

class UserSettingsHolder:
    SETTINGS_MODULE: Incomplete
    default_settings: Incomplete
    def __init__(self, default_settings) -> None: ...
    def __getattr__(self, name): ...
    def __setattr__(self, name, value) -> None: ...
    def __delattr__(self, name) -> None: ...
    def __dir__(self): ...
    def is_overridden(self, setting): ...

settings: Incomplete

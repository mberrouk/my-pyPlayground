from _typeshed import Incomplete
from collections.abc import Generator
from django.conf import settings as settings
from django.core import signals as signals, signing as signing
from django.core.exceptions import DisallowedRedirect as DisallowedRedirect
from django.core.serializers.json import DjangoJSONEncoder as DjangoJSONEncoder
from django.http.cookie import SimpleCookie as SimpleCookie
from django.utils import timezone as timezone
from django.utils.datastructures import CaseInsensitiveMapping as CaseInsensitiveMapping
from django.utils.encoding import iri_to_uri as iri_to_uri
from django.utils.http import content_disposition_header as content_disposition_header, http_date as http_date

class ResponseHeaders(CaseInsensitiveMapping):
    def __init__(self, data) -> None: ...
    def __delitem__(self, key) -> None: ...
    def __setitem__(self, key, value) -> None: ...
    def pop(self, key, default: Incomplete | None = None): ...
    def setdefault(self, key, value) -> None: ...

class BadHeaderError(ValueError): ...

class HttpResponseBase:
    status_code: int
    headers: Incomplete
    cookies: Incomplete
    closed: bool
    def __init__(self, content_type: Incomplete | None = None, status: Incomplete | None = None, reason: Incomplete | None = None, charset: Incomplete | None = None, headers: Incomplete | None = None) -> None: ...
    @property
    def reason_phrase(self): ...
    @reason_phrase.setter
    def reason_phrase(self, value) -> None: ...
    @property
    def charset(self): ...
    @charset.setter
    def charset(self, value) -> None: ...
    def serialize_headers(self): ...
    __bytes__ = serialize_headers
    def __setitem__(self, header, value) -> None: ...
    def __delitem__(self, header) -> None: ...
    def __getitem__(self, header): ...
    def has_header(self, header): ...
    __contains__ = has_header
    def items(self): ...
    def get(self, header, alternate: Incomplete | None = None): ...
    def set_cookie(self, key, value: str = '', max_age: Incomplete | None = None, expires: Incomplete | None = None, path: str = '/', domain: Incomplete | None = None, secure: bool = False, httponly: bool = False, samesite: Incomplete | None = None) -> None: ...
    def setdefault(self, key, value) -> None: ...
    def set_signed_cookie(self, key, value, salt: str = '', **kwargs): ...
    def delete_cookie(self, key, path: str = '/', domain: Incomplete | None = None, samesite: Incomplete | None = None) -> None: ...
    def make_bytes(self, value): ...
    def close(self) -> None: ...
    def write(self, content) -> None: ...
    def flush(self) -> None: ...
    def tell(self) -> None: ...
    def readable(self): ...
    def seekable(self): ...
    def writable(self): ...
    def writelines(self, lines) -> None: ...

class HttpResponse(HttpResponseBase):
    streaming: bool
    def __init__(self, content: bytes = b'', *args, **kwargs) -> None: ...
    def serialize(self): ...
    __bytes__ = serialize
    @property
    def content(self): ...
    @content.setter
    def content(self, value) -> None: ...
    def __iter__(self): ...
    def write(self, content) -> None: ...
    def tell(self): ...
    def getvalue(self): ...
    def writable(self): ...
    def writelines(self, lines) -> None: ...

class StreamingHttpResponse(HttpResponseBase):
    streaming: bool
    def __init__(self, streaming_content=(), *args, **kwargs) -> None: ...
    @property
    def content(self) -> None: ...
    @property
    def streaming_content(self): ...
    @streaming_content.setter
    def streaming_content(self, value) -> None: ...
    def __iter__(self): ...
    async def __aiter__(self) -> Generator[Incomplete]: ...
    def getvalue(self): ...

class FileResponse(StreamingHttpResponse):
    block_size: int
    as_attachment: Incomplete
    filename: Incomplete
    def __init__(self, *args, as_attachment: bool = False, filename: str = '', **kwargs) -> None: ...
    def set_headers(self, filelike): ...

class HttpResponseRedirectBase(HttpResponse):
    allowed_schemes: Incomplete
    def __init__(self, redirect_to, *args, **kwargs) -> None: ...
    url: Incomplete

class HttpResponseRedirect(HttpResponseRedirectBase):
    status_code: int

class HttpResponsePermanentRedirect(HttpResponseRedirectBase):
    status_code: int

class HttpResponseNotModified(HttpResponse):
    status_code: int
    def __init__(self, *args, **kwargs) -> None: ...
    @HttpResponse.content.setter
    def content(self, value) -> None: ...

class HttpResponseBadRequest(HttpResponse):
    status_code: int

class HttpResponseNotFound(HttpResponse):
    status_code: int

class HttpResponseForbidden(HttpResponse):
    status_code: int

class HttpResponseNotAllowed(HttpResponse):
    status_code: int
    def __init__(self, permitted_methods, *args, **kwargs) -> None: ...

class HttpResponseGone(HttpResponse):
    status_code: int

class HttpResponseServerError(HttpResponse):
    status_code: int

class Http404(Exception): ...

class JsonResponse(HttpResponse):
    def __init__(self, data, encoder=..., safe: bool = True, json_dumps_params: Incomplete | None = None, **kwargs) -> None: ...

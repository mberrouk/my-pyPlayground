from _typeshed import Incomplete

__all__ = ['MultiPartParser', 'MultiPartParserError', 'InputStreamExhausted']

class MultiPartParserError(Exception): ...
class InputStreamExhausted(Exception): ...

class MultiPartParser:
    boundary_re: Incomplete
    def __init__(self, META, input_data, upload_handlers, encoding: Incomplete | None = None) -> None: ...
    def parse(self): ...
    def handle_file_complete(self, old_field_name, counters) -> None: ...
    def sanitize_file_name(self, file_name): ...
    IE_sanitize = sanitize_file_name

class LazyStream:
    length: Incomplete
    position: int
    def __init__(self, producer, length: Incomplete | None = None) -> None: ...
    def tell(self): ...
    def read(self, size: Incomplete | None = None): ...
    def __next__(self): ...
    def close(self) -> None: ...
    def __iter__(self): ...
    def unget(self, bytes) -> None: ...

class ChunkIter:
    flo: Incomplete
    chunk_size: Incomplete
    def __init__(self, flo, chunk_size=...) -> None: ...
    def __next__(self): ...
    def __iter__(self): ...

class InterBoundaryIter:
    def __init__(self, stream, boundary) -> None: ...
    def __iter__(self): ...
    def __next__(self): ...

class BoundaryIter:
    def __init__(self, stream, boundary) -> None: ...
    def __iter__(self): ...
    def __next__(self): ...

class Parser:
    def __init__(self, stream, boundary) -> None: ...
    def __iter__(self): ...

from _typeshed import Incomplete
from django.conf import settings as settings
from django.core.exceptions import ImproperlyConfigured as ImproperlyConfigured
from django.utils.connection import BaseConnectionHandler as BaseConnectionHandler, ConnectionDoesNotExist as ConnectionDoesNotExist
from django.utils.functional import cached_property as cached_property
from django.utils.module_loading import import_string as import_string

DEFAULT_DB_ALIAS: str
DJANGO_VERSION_PICKLE_KEY: str

class Error(Exception): ...
class InterfaceError(Error): ...
class DatabaseError(Error): ...
class DataError(DatabaseError): ...
class OperationalError(DatabaseError): ...
class IntegrityError(DatabaseError): ...
class InternalError(DatabaseError): ...
class ProgrammingError(DatabaseError): ...
class NotSupportedError(DatabaseError): ...

class DatabaseErrorWrapper:
    wrapper: Incomplete
    def __init__(self, wrapper) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, traceback: types.TracebackType | None) -> None: ...
    def __call__(self, func): ...

def load_backend(backend_name): ...

class ConnectionHandler(BaseConnectionHandler):
    settings_name: str
    thread_critical: bool
    def configure_settings(self, databases): ...
    @property
    def databases(self): ...
    def create_connection(self, alias): ...

class ConnectionRouter:
    def __init__(self, routers: Incomplete | None = None) -> None: ...
    def routers(self): ...
    db_for_read: Incomplete
    db_for_write: Incomplete
    def allow_relation(self, obj1, obj2, **hints): ...
    def allow_migrate(self, db, app_label, **hints): ...
    def allow_migrate_model(self, db, model): ...
    def get_migratable_models(self, app_config, db, include_auto_created: bool = False): ...

from _typeshed import Incomplete
from collections.abc import Generator
from contextlib import ContextDecorator
from django.db import DEFAULT_DB_ALIAS as DEFAULT_DB_ALIAS, DatabaseError as DatabaseError, Error as Error, ProgrammingError as ProgrammingError, connections as connections

class TransactionManagementError(ProgrammingError): ...

def get_connection(using: Incomplete | None = None): ...
def get_autocommit(using: Incomplete | None = None): ...
def set_autocommit(autocommit, using: Incomplete | None = None): ...
def commit(using: Incomplete | None = None) -> None: ...
def rollback(using: Incomplete | None = None) -> None: ...
def savepoint(using: Incomplete | None = None): ...
def savepoint_rollback(sid, using: Incomplete | None = None) -> None: ...
def savepoint_commit(sid, using: Incomplete | None = None) -> None: ...
def clean_savepoints(using: Incomplete | None = None) -> None: ...
def get_rollback(using: Incomplete | None = None): ...
def set_rollback(rollback, using: Incomplete | None = None): ...
def mark_for_rollback_on_error(using: Incomplete | None = None) -> Generator[None]: ...
def on_commit(func, using: Incomplete | None = None, robust: bool = False) -> None: ...

class Atomic(ContextDecorator):
    using: Incomplete
    savepoint: Incomplete
    durable: Incomplete
    def __init__(self, using, savepoint, durable) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, traceback: types.TracebackType | None) -> None: ...

def atomic(using: Incomplete | None = None, savepoint: bool = True, durable: bool = False): ...
def non_atomic_requests(using: Incomplete | None = None): ...

from .base import Operation as Operation, OperationCategory as OperationCategory
from _typeshed import Incomplete
from django.db import router as router

class SeparateDatabaseAndState(Operation):
    category: Incomplete
    serialization_expand_args: Incomplete
    database_operations: Incomplete
    state_operations: Incomplete
    def __init__(self, database_operations: Incomplete | None = None, state_operations: Incomplete | None = None) -> None: ...
    def deconstruct(self): ...
    def state_forwards(self, app_label, state) -> None: ...
    def database_forwards(self, app_label, schema_editor, from_state, to_state) -> None: ...
    def database_backwards(self, app_label, schema_editor, from_state, to_state) -> None: ...
    def describe(self): ...

class RunSQL(Operation):
    category: Incomplete
    noop: str
    sql: Incomplete
    reverse_sql: Incomplete
    state_operations: Incomplete
    hints: Incomplete
    elidable: Incomplete
    def __init__(self, sql, reverse_sql: Incomplete | None = None, state_operations: Incomplete | None = None, hints: Incomplete | None = None, elidable: bool = False) -> None: ...
    def deconstruct(self): ...
    @property
    def reversible(self): ...
    def state_forwards(self, app_label, state) -> None: ...
    def database_forwards(self, app_label, schema_editor, from_state, to_state) -> None: ...
    def database_backwards(self, app_label, schema_editor, from_state, to_state) -> None: ...
    def describe(self): ...

class RunPython(Operation):
    category: Incomplete
    reduces_to_sql: bool
    atomic: Incomplete
    code: Incomplete
    reverse_code: Incomplete
    hints: Incomplete
    elidable: Incomplete
    def __init__(self, code, reverse_code: Incomplete | None = None, atomic: Incomplete | None = None, hints: Incomplete | None = None, elidable: bool = False) -> None: ...
    def deconstruct(self): ...
    @property
    def reversible(self): ...
    def state_forwards(self, app_label, state) -> None: ...
    def database_forwards(self, app_label, schema_editor, from_state, to_state) -> None: ...
    def database_backwards(self, app_label, schema_editor, from_state, to_state) -> None: ...
    def describe(self): ...
    @staticmethod
    def noop(apps, schema_editor) -> None: ...

from .exceptions import CircularDependencyError as CircularDependencyError, NodeNotFoundError as NodeNotFoundError
from _typeshed import Incomplete
from django.db.migrations.state import ProjectState as ProjectState

class Node:
    key: Incomplete
    children: Incomplete
    parents: Incomplete
    def __init__(self, key) -> None: ...
    def __eq__(self, other): ...
    def __lt__(self, other): ...
    def __hash__(self): ...
    def __getitem__(self, item): ...
    def add_child(self, child) -> None: ...
    def add_parent(self, parent) -> None: ...

class DummyNode(Node):
    origin: Incomplete
    error_message: Incomplete
    def __init__(self, key, origin, error_message) -> None: ...
    def raise_error(self) -> None: ...

class MigrationGraph:
    node_map: Incomplete
    nodes: Incomplete
    def __init__(self) -> None: ...
    def add_node(self, key, migration) -> None: ...
    def add_dummy_node(self, key, origin, error_message) -> None: ...
    def add_dependency(self, migration, child, parent, skip_validation: bool = False) -> None: ...
    def remove_replaced_nodes(self, replacement, replaced) -> None: ...
    def remove_replacement_node(self, replacement, replaced) -> None: ...
    def validate_consistency(self) -> None: ...
    def forwards_plan(self, target): ...
    def backwards_plan(self, target): ...
    def iterative_dfs(self, start, forwards: bool = True): ...
    def root_nodes(self, app: Incomplete | None = None): ...
    def leaf_nodes(self, app: Incomplete | None = None): ...
    def ensure_not_cyclic(self) -> None: ...
    def make_state(self, nodes: Incomplete | None = None, at_end: bool = True, real_apps: Incomplete | None = None): ...
    def __contains__(self, node) -> bool: ...

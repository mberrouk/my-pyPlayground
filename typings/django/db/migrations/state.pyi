from .exceptions import InvalidBasesError as InvalidBasesError
from .utils import resolve_relation as resolve_relation
from _typeshed import Incomplete
from collections.abc import Generator
from django.apps import AppConfig as AppConfig
from django.apps.registry import Apps as Apps
from django.conf import settings as settings
from django.core.exceptions import FieldDoesNotExist as FieldDoesNotExist
from django.db import models as models
from django.db.migrations.utils import field_is_referenced as field_is_referenced, get_references as get_references
from django.db.models import NOT_PROVIDED as NOT_PROVIDED
from django.db.models.fields.related import RECURSIVE_RELATIONSHIP_CONSTANT as RECURSIVE_RELATIONSHIP_CONSTANT
from django.db.models.options import DEFAULT_NAMES as DEFAULT_NAMES, normalize_together as normalize_together
from django.db.models.utils import make_model_tuple as make_model_tuple
from django.utils.functional import cached_property as cached_property
from django.utils.module_loading import import_string as import_string
from django.utils.version import get_docs_version as get_docs_version

def get_related_models_tuples(model): ...
def get_related_models_recursive(model): ...

class ProjectState:
    models: Incomplete
    real_apps: Incomplete
    is_delayed: bool
    def __init__(self, models: Incomplete | None = None, real_apps: Incomplete | None = None) -> None: ...
    @property
    def relations(self): ...
    def add_model(self, model_state) -> None: ...
    def remove_model(self, app_label, model_name) -> None: ...
    def rename_model(self, app_label, old_name, new_name) -> None: ...
    def alter_model_options(self, app_label, model_name, options, option_keys: Incomplete | None = None) -> None: ...
    def remove_model_options(self, app_label, model_name, option_name, value_to_remove) -> None: ...
    def alter_model_managers(self, app_label, model_name, managers) -> None: ...
    def add_index(self, app_label, model_name, index) -> None: ...
    def remove_index(self, app_label, model_name, index_name) -> None: ...
    def rename_index(self, app_label, model_name, old_index_name, new_index_name) -> None: ...
    def add_constraint(self, app_label, model_name, constraint) -> None: ...
    def remove_constraint(self, app_label, model_name, constraint_name) -> None: ...
    def add_field(self, app_label, model_name, name, field, preserve_default) -> None: ...
    def remove_field(self, app_label, model_name, name) -> None: ...
    def alter_field(self, app_label, model_name, name, field, preserve_default) -> None: ...
    def rename_field(self, app_label, model_name, old_name, new_name) -> None: ...
    def reload_model(self, app_label, model_name, delay: bool = False) -> None: ...
    def reload_models(self, models, delay: bool = True) -> None: ...
    def update_model_field_relation(self, model, model_key, field_name, field, concretes) -> None: ...
    def resolve_model_field_relations(self, model_key, field_name, field, concretes: Incomplete | None = None) -> None: ...
    def resolve_model_relations(self, model_key, concretes: Incomplete | None = None) -> None: ...
    def resolve_fields_and_relations(self) -> None: ...
    def get_concrete_model_key(self, model): ...
    def clone(self): ...
    def clear_delayed_apps_cache(self) -> None: ...
    def apps(self): ...
    @classmethod
    def from_apps(cls, apps): ...
    def __eq__(self, other): ...

class AppConfigStub(AppConfig):
    apps: Incomplete
    models: Incomplete
    label: Incomplete
    name: Incomplete
    def __init__(self, label) -> None: ...
    def import_models(self) -> None: ...

class StateApps(Apps):
    real_models: Incomplete
    ready_event: Incomplete
    def __init__(self, real_apps, models, ignore_swappable: bool = False) -> None: ...
    ready: bool
    def bulk_update(self) -> Generator[None]: ...
    def render_multiple(self, model_states) -> None: ...
    def clone(self): ...
    def register_model(self, app_label, model) -> None: ...
    def unregister_model(self, app_label, model_name) -> None: ...

class ModelState:
    app_label: Incomplete
    name: Incomplete
    fields: Incomplete
    options: Incomplete
    bases: Incomplete
    managers: Incomplete
    def __init__(self, app_label, name, fields, options: Incomplete | None = None, bases: Incomplete | None = None, managers: Incomplete | None = None) -> None: ...
    def name_lower(self): ...
    def get_field(self, field_name): ...
    @classmethod
    def from_model(cls, model, exclude_rels: bool = False): ...
    def construct_managers(self) -> Generator[Incomplete, None, Incomplete]: ...
    def clone(self): ...
    def render(self, apps): ...
    def get_index_by_name(self, name): ...
    def get_constraint_by_name(self, name): ...
    def __eq__(self, other): ...

from .exceptions import InvalidMigrationPlan as InvalidMigrationPlan
from .loader import MigrationLoader as MigrationLoader
from .recorder import MigrationRecorder as MigrationRecorder
from .state import ProjectState as ProjectState
from _typeshed import Incomplete
from django.db import migrations as migrations, router as router

class MigrationExecutor:
    connection: Incomplete
    loader: Incomplete
    recorder: Incomplete
    progress_callback: Incomplete
    def __init__(self, connection, progress_callback: Incomplete | None = None) -> None: ...
    def migration_plan(self, targets, clean_start: bool = False): ...
    def migrate(self, targets, plan: Incomplete | None = None, state: Incomplete | None = None, fake: bool = False, fake_initial: bool = False): ...
    def apply_migration(self, state, migration, fake: bool = False, fake_initial: bool = False): ...
    def record_migration(self, migration) -> None: ...
    def unapply_migration(self, state, migration, fake: bool = False): ...
    def check_replacements(self) -> None: ...
    def detect_soft_applied(self, project_state, migration): ...

import MySQLdb as Database
from .client import DatabaseClient as DatabaseClient
from .creation import DatabaseCreation as DatabaseCreation
from .features import DatabaseFeatures as DatabaseFeatures
from .introspection import DatabaseIntrospection as DatabaseIntrospection
from .operations import DatabaseOperations as DatabaseOperations
from .schema import DatabaseSchemaEditor as DatabaseSchemaEditor
from .validation import DatabaseValidation as DatabaseValidation
from _typeshed import Incomplete
from django.core.exceptions import ImproperlyConfigured as ImproperlyConfigured
from django.db import IntegrityError as IntegrityError
from django.db.backends.base.base import BaseDatabaseWrapper as BaseDatabaseWrapper
from django.utils.asyncio import async_unsafe as async_unsafe
from django.utils.functional import cached_property as cached_property

version: Incomplete
django_conversions: Incomplete
server_version_re: Incomplete

class CursorWrapper:
    codes_for_integrityerror: Incomplete
    cursor: Incomplete
    def __init__(self, cursor) -> None: ...
    def execute(self, query, args: Incomplete | None = None): ...
    def executemany(self, query, args): ...
    def __getattr__(self, attr): ...
    def __iter__(self): ...

class DatabaseWrapper(BaseDatabaseWrapper):
    vendor: str
    def data_types(self): ...
    operators: Incomplete
    pattern_esc: str
    pattern_ops: Incomplete
    isolation_levels: Incomplete
    Database = Database
    SchemaEditorClass = DatabaseSchemaEditor
    client_class = DatabaseClient
    creation_class = DatabaseCreation
    features_class = DatabaseFeatures
    introspection_class = DatabaseIntrospection
    ops_class = DatabaseOperations
    validation_class = DatabaseValidation
    def get_database_version(self): ...
    isolation_level: Incomplete
    def get_connection_params(self): ...
    def get_new_connection(self, conn_params): ...
    def init_connection_state(self) -> None: ...
    def create_cursor(self, name: Incomplete | None = None): ...
    def disable_constraint_checking(self): ...
    needs_rollback: Incomplete
    def enable_constraint_checking(self) -> None: ...
    def check_constraints(self, table_names: Incomplete | None = None) -> None: ...
    def is_usable(self): ...
    def display_name(self): ...
    def data_type_check_constraints(self): ...
    def mysql_server_data(self): ...
    def mysql_server_info(self): ...
    def mysql_version(self): ...
    def mysql_is_mariadb(self): ...
    def sql_mode(self): ...

from _typeshed import Incomplete
from collections.abc import Generator
from django.apps import apps as apps
from django.db import NotSupportedError as NotSupportedError
from django.utils.dateparse import parse_time as parse_time

logger: Incomplete

class CursorWrapper:
    cursor: Incomplete
    db: Incomplete
    def __init__(self, cursor, db) -> None: ...
    WRAP_ERROR_ATTRS: Incomplete
    APPS_NOT_READY_WARNING_MSG: str
    def __getattr__(self, attr): ...
    def __iter__(self): ...
    def __enter__(self): ...
    def __exit__(self, type: type[BaseException] | None, value: BaseException | None, traceback: types.TracebackType | None) -> None: ...
    def callproc(self, procname, params: Incomplete | None = None, kparams: Incomplete | None = None): ...
    def execute(self, sql, params: Incomplete | None = None): ...
    def executemany(self, sql, param_list): ...

class CursorDebugWrapper(CursorWrapper):
    def execute(self, sql, params: Incomplete | None = None): ...
    def executemany(self, sql, param_list): ...
    def debug_sql(self, sql: Incomplete | None = None, params: Incomplete | None = None, use_last_executed_query: bool = False, many: bool = False) -> Generator[None]: ...

def debug_transaction(connection, sql) -> Generator[None]: ...
def split_tzname_delta(tzname): ...
def typecast_date(s): ...
def typecast_time(s): ...
def typecast_timestamp(s): ...
def split_identifier(identifier): ...
def truncate_name(identifier, length: Incomplete | None = None, hash_len: int = 4): ...
def names_digest(*args, length): ...
def format_number(value, max_digits, decimal_places): ...
def strip_quotes(table_name): ...

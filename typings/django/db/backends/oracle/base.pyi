from .client import DatabaseClient as DatabaseClient
from .creation import DatabaseCreation as DatabaseCreation
from .features import DatabaseFeatures as DatabaseFeatures
from .introspection import DatabaseIntrospection as DatabaseIntrospection
from .operations import DatabaseOperations as DatabaseOperations
from .schema import DatabaseSchemaEditor as DatabaseSchemaEditor
from .utils import Oracle_datetime as Oracle_datetime, dsn as dsn
from .validation import DatabaseValidation as DatabaseValidation
from _typeshed import Incomplete
from collections.abc import Generator
from django.conf import settings as settings
from django.core.exceptions import ImproperlyConfigured as ImproperlyConfigured
from django.db import IntegrityError as IntegrityError
from django.db.backends.base.base import BaseDatabaseWrapper as BaseDatabaseWrapper
from django.db.backends.oracle.oracledb_any import oracledb as Database
from django.db.backends.utils import debug_transaction as debug_transaction
from django.utils.asyncio import async_unsafe as async_unsafe
from django.utils.encoding import force_bytes as force_bytes, force_str as force_str
from django.utils.functional import cached_property as cached_property
from django.utils.version import get_version_tuple as get_version_tuple

def wrap_oracle_errors() -> Generator[None]: ...

class _UninitializedOperatorsDescriptor:
    def __get__(self, instance, cls: Incomplete | None = None): ...

class DatabaseWrapper(BaseDatabaseWrapper):
    vendor: str
    display_name: str
    data_types: Incomplete
    data_type_check_constraints: Incomplete
    operators: Incomplete
    pattern_esc: str
    Database = Database
    SchemaEditorClass = DatabaseSchemaEditor
    client_class = DatabaseClient
    creation_class = DatabaseCreation
    features_class = DatabaseFeatures
    introspection_class = DatabaseIntrospection
    ops_class = DatabaseOperations
    validation_class = DatabaseValidation
    def __init__(self, *args, **kwargs) -> None: ...
    def get_database_version(self): ...
    def get_connection_params(self): ...
    def get_new_connection(self, conn_params): ...
    pattern_ops: Incomplete
    def init_connection_state(self) -> None: ...
    def create_cursor(self, name: Incomplete | None = None): ...
    def check_constraints(self, table_names: Incomplete | None = None) -> None: ...
    def is_usable(self): ...
    def oracle_version(self): ...
    def oracledb_version(self): ...

class OracleParam:
    force_bytes: Incomplete
    input_size: Incomplete
    def __init__(self, param, cursor, strings_only: bool = False) -> None: ...

class VariableWrapper:
    var: Incomplete
    def __init__(self, var) -> None: ...
    def bind_parameter(self, cursor): ...
    def __getattr__(self, key): ...
    def __setattr__(self, key, value) -> None: ...

class FormatStylePlaceholderCursor:
    charset: str
    cursor: Incomplete
    database: Incomplete
    def __init__(self, connection, database) -> None: ...
    def execute(self, query, params: Incomplete | None = None): ...
    def executemany(self, query, params: Incomplete | None = None): ...
    def close(self) -> None: ...
    def var(self, *args): ...
    def arrayvar(self, *args): ...
    def __getattr__(self, attr): ...
    def __iter__(self): ...

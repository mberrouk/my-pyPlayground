import psycopg2 as Database
from .client import DatabaseClient as DatabaseClient
from .creation import DatabaseCreation as DatabaseCreation
from .features import DatabaseFeatures as DatabaseFeatures
from .introspection import DatabaseIntrospection as DatabaseIntrospection
from .operations import DatabaseOperations as DatabaseOperations
from .psycopg_any import IsolationLevel as IsolationLevel, get_adapters_template as get_adapters_template, is_psycopg3 as is_psycopg3, register_tzloader as register_tzloader
from .schema import DatabaseSchemaEditor as DatabaseSchemaEditor
from _typeshed import Incomplete
from django.conf import settings as settings
from django.core.exceptions import ImproperlyConfigured as ImproperlyConfigured
from django.db import connections as connections
from django.db.backends.base.base import BaseDatabaseWrapper as BaseDatabaseWrapper, NO_DB_ALIAS as NO_DB_ALIAS
from django.db.backends.utils import CursorDebugWrapper as BaseCursorDebugWrapper
from django.utils.asyncio import async_unsafe as async_unsafe
from django.utils.functional import cached_property as cached_property
from django.utils.safestring import SafeString as SafeString
from django.utils.version import get_version_tuple as get_version_tuple

def psycopg_version(): ...

TIMESTAMPTZ_OID: Incomplete
INETARRAY_OID: int
INETARRAY: Incomplete

class DatabaseWrapper(BaseDatabaseWrapper):
    vendor: str
    display_name: str
    data_types: Incomplete
    data_type_check_constraints: Incomplete
    data_types_suffix: Incomplete
    operators: Incomplete
    pattern_esc: str
    pattern_ops: Incomplete
    Database = Database
    SchemaEditorClass = DatabaseSchemaEditor
    client_class = DatabaseClient
    creation_class = DatabaseCreation
    features_class = DatabaseFeatures
    introspection_class = DatabaseIntrospection
    ops_class = DatabaseOperations
    @property
    def pool(self): ...
    def close_pool(self) -> None: ...
    def get_database_version(self): ...
    def get_connection_params(self): ...
    isolation_level: Incomplete
    def get_new_connection(self, conn_params): ...
    def ensure_timezone(self): ...
    def init_connection_state(self) -> None: ...
    def create_cursor(self, name: Incomplete | None = None): ...
    def tzinfo_factory(self, offset): ...
    def chunked_cursor(self): ...
    def check_constraints(self, table_names: Incomplete | None = None) -> None: ...
    def is_usable(self): ...
    def close_if_health_check_failed(self): ...
    def pg_version(self): ...
    def make_debug_cursor(self, cursor): ...

class CursorMixin:
    def callproc(self, name, args: Incomplete | None = None): ...

class ServerBindingCursor(CursorMixin, Database.Cursor): ...
class Cursor(CursorMixin, Database.ClientCursor): ...
class ServerSideCursor(CursorMixin, Database.client_cursor.ClientCursorMixin, Database.ServerCursor): ...

class CursorDebugWrapper(BaseCursorDebugWrapper):
    def copy(self, statement): ...

class CursorDebugWrapper(BaseCursorDebugWrapper):
    def copy_expert(self, sql, file, *args): ...
    def copy_to(self, file, table, *args, **kwargs): ...

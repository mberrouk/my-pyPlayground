from _typeshed import Incomplete
from django.db import router as router
from django.db.models.query import QuerySet as QuerySet

class BaseManager:
    creation_counter: int
    auto_created: bool
    use_in_migrations: bool
    def __new__(cls, *args, **kwargs): ...
    model: Incomplete
    name: Incomplete
    def __init__(self) -> None: ...
    def __class_getitem__(cls, *args, **kwargs): ...
    def deconstruct(self): ...
    def check(self, **kwargs): ...
    @classmethod
    def from_queryset(cls, queryset_class, class_name: Incomplete | None = None): ...
    def contribute_to_class(self, cls, name) -> None: ...
    def db_manager(self, using: Incomplete | None = None, hints: Incomplete | None = None): ...
    @property
    def db(self): ...
    def get_queryset(self): ...
    def all(self): ...
    def __eq__(self, other): ...
    def __hash__(self): ...

class Manager(Incomplete): ...

class ManagerDescriptor:
    manager: Incomplete
    def __init__(self, manager) -> None: ...
    def __get__(self, instance, cls: Incomplete | None = None): ...

class EmptyManager(Manager):
    model: Incomplete
    def __init__(self, model) -> None: ...
    def get_queryset(self): ...

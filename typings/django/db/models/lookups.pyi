from _typeshed import Incomplete
from django.core.exceptions import EmptyResultSet as EmptyResultSet, FullResultSet as FullResultSet
from django.db.backends.base.operations import BaseDatabaseOperations as BaseDatabaseOperations
from django.db.models.expressions import Case as Case, Expression as Expression, Func as Func, Value as Value, When as When
from django.db.models.fields import BooleanField as BooleanField, CharField as CharField, DateTimeField as DateTimeField, Field as Field, IntegerField as IntegerField, UUIDField as UUIDField
from django.db.models.query_utils import RegisterLookupMixin as RegisterLookupMixin
from django.utils.datastructures import OrderedSet as OrderedSet
from django.utils.deprecation import RemovedInDjango60Warning as RemovedInDjango60Warning
from django.utils.functional import cached_property as cached_property
from django.utils.hashable import make_hashable as make_hashable

class Lookup(Expression):
    lookup_name: Incomplete
    prepare_rhs: bool
    can_use_none_as_rhs: bool
    rhs: Incomplete
    lhs: Incomplete
    bilateral_transforms: Incomplete
    def __init__(self, lhs, rhs) -> None: ...
    def apply_bilateral_transforms(self, value): ...
    def batch_process_rhs(self, compiler, connection, rhs: Incomplete | None = None): ...
    def get_source_expressions(self): ...
    def set_source_expressions(self, new_exprs) -> None: ...
    def get_prep_lookup(self): ...
    def get_prep_lhs(self): ...
    def get_db_prep_lookup(self, value, connection): ...
    def process_lhs(self, compiler, connection, lhs: Incomplete | None = None): ...
    def process_rhs(self, compiler, connection): ...
    def rhs_is_direct_value(self): ...
    def get_group_by_cols(self): ...
    def as_oracle(self, compiler, connection): ...
    def output_field(self): ...
    @property
    def identity(self): ...
    def __eq__(self, other): ...
    def __hash__(self): ...
    def resolve_expression(self, query: Incomplete | None = None, allow_joins: bool = True, reuse: Incomplete | None = None, summarize: bool = False, for_save: bool = False): ...
    def select_format(self, compiler, sql, params): ...
    def allowed_default(self): ...

class Transform(RegisterLookupMixin, Func):
    bilateral: bool
    arity: int
    @property
    def lhs(self): ...
    def get_bilateral_transforms(self): ...

class BuiltinLookup(Lookup):
    def process_lhs(self, compiler, connection, lhs: Incomplete | None = None): ...
    def as_sql(self, compiler, connection): ...
    def get_rhs_op(self, connection, rhs): ...

class FieldGetDbPrepValueMixin:
    get_db_prep_lookup_value_is_iterable: bool
    def get_db_prep_lookup(self, value, connection): ...

class FieldGetDbPrepValueIterableMixin(FieldGetDbPrepValueMixin):
    get_db_prep_lookup_value_is_iterable: bool
    def get_prep_lookup(self): ...
    def process_rhs(self, compiler, connection): ...
    def resolve_expression_parameter(self, compiler, connection, sql, param): ...
    def batch_process_rhs(self, compiler, connection, rhs: Incomplete | None = None): ...

class PostgresOperatorLookup(Lookup):
    postgres_operator: Incomplete
    def as_postgresql(self, compiler, connection): ...

class Exact(FieldGetDbPrepValueMixin, BuiltinLookup):
    lookup_name: str
    def get_prep_lookup(self): ...
    def as_sql(self, compiler, connection): ...

class IExact(BuiltinLookup):
    lookup_name: str
    prepare_rhs: bool
    def process_rhs(self, qn, connection): ...

class GreaterThan(FieldGetDbPrepValueMixin, BuiltinLookup):
    lookup_name: str

class GreaterThanOrEqual(FieldGetDbPrepValueMixin, BuiltinLookup):
    lookup_name: str

class LessThan(FieldGetDbPrepValueMixin, BuiltinLookup):
    lookup_name: str

class LessThanOrEqual(FieldGetDbPrepValueMixin, BuiltinLookup):
    lookup_name: str

class IntegerFieldOverflow:
    underflow_exception = EmptyResultSet
    overflow_exception = EmptyResultSet
    def process_rhs(self, compiler, connection): ...

class IntegerFieldFloatRounding:
    rhs: Incomplete
    def get_prep_lookup(self): ...

class IntegerFieldExact(IntegerFieldOverflow, Exact): ...

class IntegerGreaterThan(IntegerFieldOverflow, GreaterThan):
    underflow_exception = FullResultSet

class IntegerGreaterThanOrEqual(IntegerFieldOverflow, IntegerFieldFloatRounding, GreaterThanOrEqual):
    underflow_exception = FullResultSet

class IntegerLessThan(IntegerFieldOverflow, IntegerFieldFloatRounding, LessThan):
    overflow_exception = FullResultSet

class IntegerLessThanOrEqual(IntegerFieldOverflow, LessThanOrEqual):
    overflow_exception = FullResultSet

class In(FieldGetDbPrepValueIterableMixin, BuiltinLookup):
    lookup_name: str
    def get_refs(self): ...
    def get_prep_lookup(self): ...
    def process_rhs(self, compiler, connection): ...
    def get_rhs_op(self, connection, rhs): ...
    def as_sql(self, compiler, connection): ...
    def split_parameter_list_as_sql(self, compiler, connection): ...

class PatternLookup(BuiltinLookup):
    param_pattern: str
    prepare_rhs: bool
    def get_rhs_op(self, connection, rhs): ...
    def process_rhs(self, qn, connection): ...

class Contains(PatternLookup):
    lookup_name: str

class IContains(Contains):
    lookup_name: str

class StartsWith(PatternLookup):
    lookup_name: str
    param_pattern: str

class IStartsWith(StartsWith):
    lookup_name: str

class EndsWith(PatternLookup):
    lookup_name: str
    param_pattern: str

class IEndsWith(EndsWith):
    lookup_name: str

class Range(FieldGetDbPrepValueIterableMixin, BuiltinLookup):
    lookup_name: str
    def get_rhs_op(self, connection, rhs): ...

class IsNull(BuiltinLookup):
    lookup_name: str
    prepare_rhs: bool
    def as_sql(self, compiler, connection): ...

class Regex(BuiltinLookup):
    lookup_name: str
    prepare_rhs: bool
    def as_sql(self, compiler, connection): ...

class IRegex(Regex):
    lookup_name: str

class YearLookup(Lookup):
    def year_lookup_bounds(self, connection, year): ...
    def as_sql(self, compiler, connection): ...
    def get_direct_rhs_sql(self, connection, rhs): ...
    def get_bound_params(self, start, finish) -> None: ...

class YearExact(YearLookup, Exact):
    def get_direct_rhs_sql(self, connection, rhs): ...
    def get_bound_params(self, start, finish): ...

class YearGt(YearLookup, GreaterThan):
    def get_bound_params(self, start, finish): ...

class YearGte(YearLookup, GreaterThanOrEqual):
    def get_bound_params(self, start, finish): ...

class YearLt(YearLookup, LessThan):
    def get_bound_params(self, start, finish): ...

class YearLte(YearLookup, LessThanOrEqual):
    def get_bound_params(self, start, finish): ...

class UUIDTextMixin:
    rhs: Incomplete
    def process_rhs(self, qn, connection): ...

class UUIDIExact(UUIDTextMixin, IExact): ...
class UUIDContains(UUIDTextMixin, Contains): ...
class UUIDIContains(UUIDTextMixin, IContains): ...
class UUIDStartsWith(UUIDTextMixin, StartsWith): ...
class UUIDIStartsWith(UUIDTextMixin, IStartsWith): ...
class UUIDEndsWith(UUIDTextMixin, EndsWith): ...
class UUIDIEndsWith(UUIDTextMixin, IEndsWith): ...

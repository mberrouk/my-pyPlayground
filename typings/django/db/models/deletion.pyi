from _typeshed import Incomplete
from collections.abc import Generator
from django.db import IntegrityError as IntegrityError, connections as connections, models as models, transaction as transaction
from django.db.models import query_utils as query_utils, signals as signals, sql as sql

class ProtectedError(IntegrityError):
    protected_objects: Incomplete
    def __init__(self, msg, protected_objects) -> None: ...

class RestrictedError(IntegrityError):
    restricted_objects: Incomplete
    def __init__(self, msg, restricted_objects) -> None: ...

def CASCADE(collector, field, sub_objs, using) -> None: ...
def PROTECT(collector, field, sub_objs, using) -> None: ...
def RESTRICT(collector, field, sub_objs, using) -> None: ...
def SET(value): ...
def SET_NULL(collector, field, sub_objs, using) -> None: ...
def SET_DEFAULT(collector, field, sub_objs, using) -> None: ...
def DO_NOTHING(collector, field, sub_objs, using) -> None: ...
def get_candidate_relations_to_delete(opts): ...

class Collector:
    using: Incomplete
    origin: Incomplete
    data: Incomplete
    field_updates: Incomplete
    restricted_objects: Incomplete
    fast_deletes: Incomplete
    dependencies: Incomplete
    def __init__(self, using, origin: Incomplete | None = None) -> None: ...
    def add(self, objs, source: Incomplete | None = None, nullable: bool = False, reverse_dependency: bool = False): ...
    def add_dependency(self, model, dependency, reverse_dependency: bool = False) -> None: ...
    def add_field_update(self, field, value, objs) -> None: ...
    def add_restricted_objects(self, field, objs) -> None: ...
    def clear_restricted_objects_from_set(self, model, objs) -> None: ...
    def clear_restricted_objects_from_queryset(self, model, qs) -> None: ...
    def can_fast_delete(self, objs, from_field: Incomplete | None = None): ...
    def get_del_batches(self, objs, fields): ...
    def collect(self, objs, source: Incomplete | None = None, nullable: bool = False, collect_related: bool = True, source_attr: Incomplete | None = None, reverse_dependency: bool = False, keep_parents: bool = False, fail_on_restricted: bool = True) -> None: ...
    def related_objects(self, related_model, related_fields, objs): ...
    def instances_with_model(self) -> Generator[Incomplete]: ...
    def sort(self) -> None: ...
    def delete(self): ...

from _typeshed import Incomplete
from enum import Enum

__all__ = ['BaseConstraint', 'CheckConstraint', 'Deferrable', 'UniqueConstraint']

class BaseConstraint:
    default_violation_error_message: Incomplete
    violation_error_code: Incomplete
    violation_error_message: Incomplete
    name: Incomplete
    def __init__(self, *args, name: Incomplete | None = None, violation_error_code: Incomplete | None = None, violation_error_message: Incomplete | None = None) -> None: ...
    @property
    def contains_expressions(self): ...
    def constraint_sql(self, model, schema_editor) -> None: ...
    def create_sql(self, model, schema_editor) -> None: ...
    def remove_sql(self, model, schema_editor) -> None: ...
    def validate(self, model, instance, exclude: Incomplete | None = None, using=...) -> None: ...
    def get_violation_error_message(self): ...
    def deconstruct(self): ...
    def clone(self): ...

class CheckConstraint(BaseConstraint):
    condition: Incomplete
    def __init__(self, *, name, condition: Incomplete | None = None, check: Incomplete | None = None, violation_error_code: Incomplete | None = None, violation_error_message: Incomplete | None = None) -> None: ...
    check: Incomplete
    def constraint_sql(self, model, schema_editor): ...
    def create_sql(self, model, schema_editor): ...
    def remove_sql(self, model, schema_editor): ...
    def validate(self, model, instance, exclude: Incomplete | None = None, using=...) -> None: ...
    def __eq__(self, other): ...
    def deconstruct(self): ...

class Deferrable(Enum):
    DEFERRED = 'deferred'
    IMMEDIATE = 'immediate'

class UniqueConstraint(BaseConstraint):
    fields: Incomplete
    condition: Incomplete
    deferrable: Incomplete
    include: Incomplete
    opclasses: Incomplete
    nulls_distinct: Incomplete
    expressions: Incomplete
    def __init__(self, *expressions, fields=(), name: Incomplete | None = None, condition: Incomplete | None = None, deferrable: Incomplete | None = None, include: Incomplete | None = None, opclasses=(), nulls_distinct: Incomplete | None = None, violation_error_code: Incomplete | None = None, violation_error_message: Incomplete | None = None) -> None: ...
    @property
    def contains_expressions(self): ...
    def constraint_sql(self, model, schema_editor): ...
    def create_sql(self, model, schema_editor): ...
    def remove_sql(self, model, schema_editor): ...
    def __eq__(self, other): ...
    def deconstruct(self): ...
    def validate(self, model, instance, exclude: Incomplete | None = None, using=...) -> None: ...

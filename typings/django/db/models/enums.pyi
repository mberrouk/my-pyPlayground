import enum
from _typeshed import Incomplete
from enum import EnumMeta as EnumType, IntEnum, StrEnum

__all__ = ['Choices', 'IntegerChoices', 'TextChoices']

class ReprEnum(enum.Enum): ...
class IntEnum(int, ReprEnum): ...
class StrEnum(str, ReprEnum): ...

class ChoicesType(EnumType):
    def __new__(metacls, classname, bases, classdict, **kwds): ...
    def __contains__(cls, member) -> bool: ...
    @property
    def names(cls): ...
    @property
    def choices(cls): ...
    @property
    def labels(cls): ...
    @property
    def values(cls): ...

class Choices(enum.Enum, metaclass=ChoicesType):
    do_not_call_in_templates: Incomplete
    @property
    def do_not_call_in_templates(self): ...
    def label(self): ...

class IntegerChoices(Choices, IntEnum): ...
class TextChoices(Choices, StrEnum): ...

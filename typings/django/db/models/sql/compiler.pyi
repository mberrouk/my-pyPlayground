from _typeshed import Incomplete
from collections.abc import Generator
from django.core.exceptions import EmptyResultSet as EmptyResultSet, FieldError as FieldError, FullResultSet as FullResultSet
from django.db import DatabaseError as DatabaseError, NotSupportedError as NotSupportedError
from django.db.models.constants import LOOKUP_SEP as LOOKUP_SEP
from django.db.models.expressions import F as F, OrderBy as OrderBy, RawSQL as RawSQL, Ref as Ref, Value as Value
from django.db.models.functions import Cast as Cast, Random as Random
from django.db.models.lookups import Lookup as Lookup
from django.db.models.query_utils import select_related_descend as select_related_descend
from django.db.models.sql.constants import CURSOR as CURSOR, GET_ITERATOR_CHUNK_SIZE as GET_ITERATOR_CHUNK_SIZE, MULTI as MULTI, NO_RESULTS as NO_RESULTS, ORDER_DIR as ORDER_DIR, SINGLE as SINGLE
from django.db.models.sql.query import Query as Query, get_order_dir as get_order_dir
from django.db.models.sql.where import AND as AND
from django.db.transaction import TransactionManagementError as TransactionManagementError
from django.utils.functional import cached_property as cached_property
from django.utils.hashable import make_hashable as make_hashable

class PositionRef(Ref):
    ordinal: Incomplete
    def __init__(self, ordinal, refs, source) -> None: ...
    def as_sql(self, compiler, connection): ...

class SQLCompiler:
    ordering_parts: Incomplete
    query: Incomplete
    connection: Incomplete
    using: Incomplete
    elide_empty: Incomplete
    quote_cache: Incomplete
    select: Incomplete
    annotation_col_map: Incomplete
    klass_info: Incomplete
    def __init__(self, query, connection, using, elide_empty: bool = True) -> None: ...
    col_count: Incomplete
    def setup_query(self, with_col_aliases: bool = False) -> None: ...
    has_extra_select: Incomplete
    def pre_sql_setup(self, with_col_aliases: bool = False): ...
    def get_group_by(self, select, order_by): ...
    def collapse_group_by(self, expressions, having): ...
    def get_select(self, with_col_aliases: bool = False): ...
    def get_order_by(self): ...
    def get_extra_select(self, order_by, select): ...
    def quote_name_unless_alias(self, name): ...
    def compile(self, node): ...
    def get_combinator_sql(self, combinator, all): ...
    qualify: Incomplete
    def get_qualify_sql(self): ...
    def as_sql(self, with_limits: bool = True, with_col_aliases: bool = False): ...
    def get_default_columns(self, select_mask, start_alias: Incomplete | None = None, opts: Incomplete | None = None, from_parent: Incomplete | None = None): ...
    def get_distinct(self): ...
    def find_ordering_name(self, name, opts, alias: Incomplete | None = None, default_order: str = 'ASC', already_seen: Incomplete | None = None): ...
    def get_from_clause(self): ...
    def get_related_selections(self, select, select_mask, opts: Incomplete | None = None, root_alias: Incomplete | None = None, cur_depth: int = 1, requested: Incomplete | None = None, restricted: Incomplete | None = None): ...
    def get_select_for_update_of_arguments(self): ...
    def get_converters(self, expressions): ...
    def apply_converters(self, rows, converters) -> Generator[Incomplete]: ...
    def results_iter(self, results: Incomplete | None = None, tuple_expected: bool = False, chunked_fetch: bool = False, chunk_size=...): ...
    def has_results(self): ...
    def execute_sql(self, result_type=..., chunked_fetch: bool = False, chunk_size=...): ...
    def as_subquery_condition(self, alias, columns, compiler): ...
    def explain_query(self) -> Generator[Incomplete]: ...

class SQLInsertCompiler(SQLCompiler):
    returning_fields: Incomplete
    returning_params: Incomplete
    def field_as_sql(self, field, val): ...
    def prepare_value(self, field, value): ...
    def pre_save_val(self, field, obj): ...
    def assemble_as_sql(self, fields, value_rows): ...
    def as_sql(self): ...
    def execute_sql(self, returning_fields: Incomplete | None = None): ...

class SQLDeleteCompiler(SQLCompiler):
    def single_alias(self): ...
    def contains_self_reference_subquery(self): ...
    def as_sql(self): ...

class SQLUpdateCompiler(SQLCompiler):
    def as_sql(self): ...
    def execute_sql(self, result_type): ...
    def pre_sql_setup(self) -> None: ...

class SQLAggregateCompiler(SQLCompiler):
    col_count: Incomplete
    def as_sql(self): ...

def cursor_iter(cursor, sentinel, col_count, itersize) -> Generator[Incomplete, None, Incomplete]: ...

from _typeshed import Incomplete
from django.db.models.sql.query import Query

__all__ = ['DeleteQuery', 'UpdateQuery', 'InsertQuery', 'AggregateQuery']

class DeleteQuery(Query):
    compiler: str
    alias_map: Incomplete
    where: Incomplete
    def do_query(self, table, where, using): ...
    def delete_batch(self, pk_list, using): ...

class UpdateQuery(Query):
    compiler: str
    def __init__(self, *args, **kwargs) -> None: ...
    def clone(self): ...
    def update_batch(self, pk_list, values, using) -> None: ...
    def add_update_values(self, values): ...
    def add_update_fields(self, values_seq) -> None: ...
    def add_related_update(self, model, field, value) -> None: ...
    def get_related_updates(self): ...

class InsertQuery(Query):
    compiler: str
    fields: Incomplete
    objs: Incomplete
    on_conflict: Incomplete
    update_fields: Incomplete
    unique_fields: Incomplete
    def __init__(self, *args, on_conflict: Incomplete | None = None, update_fields: Incomplete | None = None, unique_fields: Incomplete | None = None, **kwargs) -> None: ...
    raw: Incomplete
    def insert_values(self, fields, objs, raw: bool = False) -> None: ...

class AggregateQuery(Query):
    compiler: str
    inner_query: Incomplete
    def __init__(self, model, inner_query) -> None: ...

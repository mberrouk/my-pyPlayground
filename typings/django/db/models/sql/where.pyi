from _typeshed import Incomplete
from collections.abc import Generator
from django.core.exceptions import EmptyResultSet as EmptyResultSet, FullResultSet as FullResultSet
from django.db.models.expressions import Case as Case, When as When
from django.db.models.functions import Mod as Mod
from django.db.models.lookups import Exact as Exact
from django.utils import tree as tree
from django.utils.functional import cached_property as cached_property

AND: str
OR: str
XOR: str

class WhereNode(tree.Node):
    default = AND
    resolved: bool
    conditional: bool
    def split_having_qualify(self, negated: bool = False, must_group_by: bool = False): ...
    def as_sql(self, compiler, connection): ...
    def get_group_by_cols(self): ...
    def get_source_expressions(self): ...
    children: Incomplete
    def set_source_expressions(self, children) -> None: ...
    def relabel_aliases(self, change_map): ...
    def clone(self): ...
    def relabeled_clone(self, change_map): ...
    def replace_expressions(self, replacements): ...
    def get_refs(self): ...
    def contains_aggregate(self): ...
    def contains_over_clause(self): ...
    @property
    def is_summary(self): ...
    def resolve_expression(self, *args, **kwargs): ...
    def output_field(self): ...
    def select_format(self, compiler, sql, params): ...
    def get_db_converters(self, connection): ...
    def get_lookup(self, lookup): ...
    def leaves(self) -> Generator[Incomplete, Incomplete]: ...

class NothingNode:
    contains_aggregate: bool
    contains_over_clause: bool
    def as_sql(self, compiler: Incomplete | None = None, connection: Incomplete | None = None) -> None: ...

class ExtraWhere:
    contains_aggregate: bool
    contains_over_clause: bool
    sqls: Incomplete
    params: Incomplete
    def __init__(self, sqls, params) -> None: ...
    def as_sql(self, compiler: Incomplete | None = None, connection: Incomplete | None = None): ...

class SubqueryConstraint:
    contains_aggregate: bool
    contains_over_clause: bool
    alias: Incomplete
    columns: Incomplete
    targets: Incomplete
    query_object: Incomplete
    def __init__(self, alias, columns, targets, query_object) -> None: ...
    def as_sql(self, compiler, connection): ...

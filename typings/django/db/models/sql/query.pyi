from _typeshed import Incomplete
from django.db.models.expressions import BaseExpression
from django.db.models.sql.datastructures import BaseTable, Join
from typing import NamedTuple

__all__ = ['Query', 'RawQuery']

class JoinInfo(NamedTuple):
    final_field: Incomplete
    targets: Incomplete
    opts: Incomplete
    joins: Incomplete
    path: Incomplete
    transform_function: Incomplete

class RawQuery:
    params: Incomplete
    sql: Incomplete
    using: Incomplete
    cursor: Incomplete
    extra_select: Incomplete
    annotation_select: Incomplete
    def __init__(self, sql, using, params=()) -> None: ...
    def chain(self, using): ...
    def clone(self, using): ...
    def get_columns(self): ...
    def __iter__(self): ...
    @property
    def params_type(self): ...

class ExplainInfo(NamedTuple):
    format: Incomplete
    options: Incomplete

class Query(BaseExpression):
    alias_prefix: str
    empty_result_set_value: Incomplete
    subq_aliases: Incomplete
    compiler: str
    base_table_class = BaseTable
    join_class = Join
    default_cols: bool
    default_ordering: bool
    standard_ordering: bool
    filter_is_sticky: bool
    subquery: bool
    select: Incomplete
    group_by: Incomplete
    order_by: Incomplete
    low_mark: int
    high_mark: Incomplete
    distinct: bool
    distinct_fields: Incomplete
    select_for_update: bool
    select_for_update_nowait: bool
    select_for_update_skip_locked: bool
    select_for_update_of: Incomplete
    select_for_no_key_update: bool
    select_related: bool
    has_select_fields: bool
    max_depth: int
    values_select: Incomplete
    annotation_select_mask: Incomplete
    combinator: Incomplete
    combinator_all: bool
    combined_queries: Incomplete
    extra_select_mask: Incomplete
    extra_tables: Incomplete
    extra_order_by: Incomplete
    deferred_loading: Incomplete
    explain_info: Incomplete
    model: Incomplete
    alias_refcount: Incomplete
    alias_map: Incomplete
    alias_cols: Incomplete
    external_aliases: Incomplete
    table_map: Incomplete
    used_aliases: Incomplete
    where: Incomplete
    annotations: Incomplete
    extra: Incomplete
    def __init__(self, model, alias_cols: bool = True) -> None: ...
    @property
    def output_field(self): ...
    def base_table(self): ...
    def sql_with_params(self): ...
    def __deepcopy__(self, memo): ...
    def get_compiler(self, using: Incomplete | None = None, connection: Incomplete | None = None, elide_empty: bool = True): ...
    def get_meta(self): ...
    def clone(self): ...
    def chain(self, klass: Incomplete | None = None): ...
    def relabeled_clone(self, change_map): ...
    def get_aggregation(self, using, aggregate_exprs): ...
    def get_count(self, using): ...
    def has_filters(self): ...
    def exists(self, limit: bool = True): ...
    def has_results(self, using): ...
    def explain(self, using, format: Incomplete | None = None, **options): ...
    def combine(self, rhs, connector) -> None: ...
    def get_select_mask(self): ...
    def table_alias(self, table_name, create: bool = False, filtered_relation: Incomplete | None = None): ...
    def ref_alias(self, alias) -> None: ...
    def unref_alias(self, alias, amount: int = 1) -> None: ...
    def promote_joins(self, aliases) -> None: ...
    def demote_joins(self, aliases) -> None: ...
    def reset_refcounts(self, to_counts) -> None: ...
    def change_aliases(self, change_map): ...
    def bump_prefix(self, other_query, exclude: Incomplete | None = None) -> None: ...
    def get_initial_alias(self): ...
    def count_active_tables(self): ...
    def join(self, join, reuse: Incomplete | None = None): ...
    def join_parent_model(self, opts, model, alias, seen): ...
    def check_alias(self, alias) -> None: ...
    def add_annotation(self, annotation, alias, select: bool = True) -> None: ...
    def resolve_expression(self, query, *args, **kwargs): ...
    def get_external_cols(self): ...
    def get_group_by_cols(self, wrapper: Incomplete | None = None): ...
    def as_sql(self, compiler, connection): ...
    def resolve_lookup_value(self, value, can_reuse, allow_joins, summarize: bool = False): ...
    def solve_lookup_type(self, lookup, summarize: bool = False): ...
    def check_query_object_type(self, value, opts, field) -> None: ...
    def check_related_objects(self, field, value, opts) -> None: ...
    def check_filterable(self, expression) -> None: ...
    def build_lookup(self, lookups, lhs, rhs): ...
    def try_transform(self, lhs, name): ...
    def build_filter(self, filter_expr, branch_negated: bool = False, current_negated: bool = False, can_reuse: Incomplete | None = None, allow_joins: bool = True, split_subq: bool = True, check_filterable: bool = True, summarize: bool = False, update_join_types: bool = True): ...
    def add_filter(self, filter_lhs, filter_rhs) -> None: ...
    def add_q(self, q_object) -> None: ...
    def build_where(self, filter_expr): ...
    def clear_where(self) -> None: ...
    def add_filtered_relation(self, filtered_relation, alias) -> None: ...
    def names_to_path(self, names, opts, allow_many: bool = True, fail_on_missing: bool = False): ...
    def setup_joins(self, names, opts, alias, can_reuse: Incomplete | None = None, allow_many: bool = True): ...
    def trim_joins(self, targets, joins, path): ...
    def resolve_ref(self, name, allow_joins: bool = True, reuse: Incomplete | None = None, summarize: bool = False): ...
    def split_exclude(self, filter_expr, can_reuse, names_with_path): ...
    def set_empty(self) -> None: ...
    def is_empty(self): ...
    def set_limits(self, low: Incomplete | None = None, high: Incomplete | None = None) -> None: ...
    def clear_limits(self) -> None: ...
    @property
    def is_sliced(self): ...
    def has_limit_one(self): ...
    def can_filter(self): ...
    def clear_select_clause(self) -> None: ...
    def clear_select_fields(self) -> None: ...
    def add_select_col(self, col, name) -> None: ...
    def set_select(self, cols) -> None: ...
    def add_distinct_fields(self, *field_names) -> None: ...
    def add_fields(self, field_names, allow_m2m: bool = True) -> None: ...
    def add_ordering(self, *ordering) -> None: ...
    def clear_ordering(self, force: bool = False, clear_default: bool = True) -> None: ...
    def set_group_by(self, allow_aliases: bool = True) -> None: ...
    def add_select_related(self, fields) -> None: ...
    def add_extra(self, select, select_params, where, params, tables, order_by) -> None: ...
    def clear_deferred_loading(self) -> None: ...
    def add_deferred_loading(self, field_names) -> None: ...
    def add_immediate_loading(self, field_names) -> None: ...
    def set_annotation_mask(self, names) -> None: ...
    def append_annotation_mask(self, names) -> None: ...
    def set_extra_mask(self, names) -> None: ...
    def set_values(self, fields) -> None: ...
    @property
    def annotation_select(self): ...
    @property
    def extra_select(self): ...
    def trim_start(self, names_with_path): ...
    def is_nullable(self, field): ...

class JoinPromoter:
    connector: Incomplete
    negated: Incomplete
    effective_connector: Incomplete
    num_children: Incomplete
    votes: Incomplete
    def __init__(self, connector, num_children, negated) -> None: ...
    def add_votes(self, votes) -> None: ...
    def update_join_types(self, query): ...

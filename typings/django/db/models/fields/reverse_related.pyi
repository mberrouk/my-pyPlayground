from . import BLANK_CHOICE_DASH as BLANK_CHOICE_DASH
from .mixins import FieldCacheMixin as FieldCacheMixin
from _typeshed import Incomplete
from django.core import exceptions as exceptions
from django.utils.deprecation import RemovedInDjango60Warning as RemovedInDjango60Warning
from django.utils.functional import cached_property as cached_property
from django.utils.hashable import make_hashable as make_hashable

class ForeignObjectRel(FieldCacheMixin):
    auto_created: bool
    concrete: bool
    editable: bool
    is_relation: bool
    null: bool
    empty_strings_allowed: bool
    field: Incomplete
    model: Incomplete
    related_name: Incomplete
    related_query_name: Incomplete
    limit_choices_to: Incomplete
    parent_link: Incomplete
    on_delete: Incomplete
    symmetrical: bool
    multiple: bool
    def __init__(self, field, to, related_name: Incomplete | None = None, related_query_name: Incomplete | None = None, limit_choices_to: Incomplete | None = None, parent_link: bool = False, on_delete: Incomplete | None = None) -> None: ...
    def hidden(self): ...
    def name(self): ...
    @property
    def remote_field(self): ...
    @property
    def target_field(self): ...
    def related_model(self): ...
    def many_to_many(self): ...
    def many_to_one(self): ...
    def one_to_many(self): ...
    def one_to_one(self): ...
    def get_lookup(self, lookup_name): ...
    def get_lookups(self): ...
    def get_transform(self, name): ...
    def get_internal_type(self): ...
    @property
    def db_type(self): ...
    @property
    def identity(self): ...
    def __eq__(self, other): ...
    def __hash__(self): ...
    def get_choices(self, include_blank: bool = True, blank_choice=..., limit_choices_to: Incomplete | None = None, ordering=()): ...
    def get_joining_columns(self): ...
    def get_joining_fields(self): ...
    def get_extra_restriction(self, alias, related_alias): ...
    field_name: Incomplete
    def set_field_name(self) -> None: ...
    def accessor_name(self): ...
    def get_accessor_name(self, model: Incomplete | None = None): ...
    def get_path_info(self, filtered_relation: Incomplete | None = None): ...
    def path_infos(self): ...
    def cache_name(self): ...

class ManyToOneRel(ForeignObjectRel):
    field_name: Incomplete
    def __init__(self, field, to, field_name, related_name: Incomplete | None = None, related_query_name: Incomplete | None = None, limit_choices_to: Incomplete | None = None, parent_link: bool = False, on_delete: Incomplete | None = None) -> None: ...
    @property
    def identity(self): ...
    def get_related_field(self): ...
    def set_field_name(self) -> None: ...

class OneToOneRel(ManyToOneRel):
    multiple: bool
    def __init__(self, field, to, field_name, related_name: Incomplete | None = None, related_query_name: Incomplete | None = None, limit_choices_to: Incomplete | None = None, parent_link: bool = False, on_delete: Incomplete | None = None) -> None: ...

class ManyToManyRel(ForeignObjectRel):
    through: Incomplete
    through_fields: Incomplete
    symmetrical: Incomplete
    db_constraint: Incomplete
    def __init__(self, field, to, related_name: Incomplete | None = None, related_query_name: Incomplete | None = None, limit_choices_to: Incomplete | None = None, symmetrical: bool = True, through: Incomplete | None = None, through_fields: Incomplete | None = None, db_constraint: bool = True) -> None: ...
    @property
    def identity(self): ...
    def get_related_field(self): ...

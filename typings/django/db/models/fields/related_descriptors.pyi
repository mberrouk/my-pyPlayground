from _typeshed import Incomplete
from django.core.exceptions import FieldError as FieldError
from django.db import DEFAULT_DB_ALIAS as DEFAULT_DB_ALIAS, NotSupportedError as NotSupportedError, connections as connections, router as router, transaction as transaction
from django.db.models import Manager as Manager, Q as Q, Window as Window, signals as signals
from django.db.models.functions import RowNumber as RowNumber
from django.db.models.lookups import GreaterThan as GreaterThan, LessThanOrEqual as LessThanOrEqual
from django.db.models.query import QuerySet as QuerySet
from django.db.models.query_utils import DeferredAttribute as DeferredAttribute
from django.db.models.utils import AltersData as AltersData, resolve_callables as resolve_callables
from django.utils.deprecation import RemovedInDjango60Warning as RemovedInDjango60Warning
from django.utils.functional import cached_property as cached_property

class ForeignKeyDeferredAttribute(DeferredAttribute):
    def __set__(self, instance, value) -> None: ...

class ForwardManyToOneDescriptor:
    field: Incomplete
    def __init__(self, field_with_rel) -> None: ...
    def RelatedObjectDoesNotExist(self): ...
    def is_cached(self, instance): ...
    def get_queryset(self, **hints): ...
    def get_prefetch_queryset(self, instances, queryset: Incomplete | None = None): ...
    def get_prefetch_querysets(self, instances, querysets: Incomplete | None = None): ...
    def get_object(self, instance): ...
    def __get__(self, instance, cls: Incomplete | None = None): ...
    def __set__(self, instance, value) -> None: ...
    def __reduce__(self): ...

class ForwardOneToOneDescriptor(ForwardManyToOneDescriptor):
    def get_object(self, instance): ...
    def __set__(self, instance, value) -> None: ...

class ReverseOneToOneDescriptor:
    related: Incomplete
    def __init__(self, related) -> None: ...
    def RelatedObjectDoesNotExist(self): ...
    def is_cached(self, instance): ...
    def get_queryset(self, **hints): ...
    def get_prefetch_queryset(self, instances, queryset: Incomplete | None = None): ...
    def get_prefetch_querysets(self, instances, querysets: Incomplete | None = None): ...
    def __get__(self, instance, cls: Incomplete | None = None): ...
    def __set__(self, instance, value) -> None: ...
    def __reduce__(self): ...

class ReverseManyToOneDescriptor:
    rel: Incomplete
    field: Incomplete
    def __init__(self, rel) -> None: ...
    def related_manager_cls(self): ...
    def __get__(self, instance, cls: Incomplete | None = None): ...
    def __set__(self, instance, value) -> None: ...

def create_reverse_many_to_one_manager(superclass, rel): ...

class ManyToManyDescriptor(ReverseManyToOneDescriptor):
    reverse: Incomplete
    def __init__(self, rel, reverse: bool = False) -> None: ...
    @property
    def through(self): ...
    def related_manager_cls(self): ...

def create_forward_many_to_many_manager(superclass, rel, reverse): ...

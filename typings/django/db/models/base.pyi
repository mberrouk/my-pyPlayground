from _typeshed import Incomplete
from django.apps import apps as apps
from django.conf import settings as settings
from django.core import checks as checks
from django.core.exceptions import FieldDoesNotExist as FieldDoesNotExist, FieldError as FieldError, MultipleObjectsReturned as MultipleObjectsReturned, NON_FIELD_ERRORS as NON_FIELD_ERRORS, ObjectDoesNotExist as ObjectDoesNotExist, ValidationError as ValidationError
from django.db import DJANGO_VERSION_PICKLE_KEY as DJANGO_VERSION_PICKLE_KEY, DatabaseError as DatabaseError, connection as connection, connections as connections, router as router, transaction as transaction
from django.db.models import ExpressionWrapper as ExpressionWrapper, IntegerField as IntegerField, Max as Max, NOT_PROVIDED as NOT_PROVIDED, Value as Value
from django.db.models.constants import LOOKUP_SEP as LOOKUP_SEP
from django.db.models.deletion import CASCADE as CASCADE, Collector as Collector
from django.db.models.expressions import DatabaseDefault as DatabaseDefault
from django.db.models.fields.related import ForeignObjectRel as ForeignObjectRel, OneToOneField as OneToOneField, lazy_related_operation as lazy_related_operation, resolve_relation as resolve_relation
from django.db.models.functions import Coalesce as Coalesce
from django.db.models.manager import Manager as Manager
from django.db.models.options import Options as Options
from django.db.models.query import F as F, Q as Q
from django.db.models.signals import class_prepared as class_prepared, post_init as post_init, post_save as post_save, pre_init as pre_init, pre_save as pre_save
from django.db.models.utils import AltersData as AltersData, make_model_tuple as make_model_tuple
from django.utils.deprecation import RemovedInDjango60Warning as RemovedInDjango60Warning
from django.utils.encoding import force_str as force_str
from django.utils.hashable import make_hashable as make_hashable
from django.utils.text import capfirst as capfirst, get_text_list as get_text_list

class Deferred: ...

DEFERRED: Incomplete

def subclass_exception(name, bases, module, attached_to): ...

class ModelBase(type):
    def __new__(cls, name, bases, attrs, **kwargs): ...
    def add_to_class(cls, name, value) -> None: ...

class ModelStateFieldsCacheDescriptor:
    def __get__(self, instance, cls: Incomplete | None = None): ...

class ModelState:
    db: Incomplete
    adding: bool
    fields_cache: Incomplete

class Model(AltersData, metaclass=ModelBase):
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def from_db(cls, db, field_names, values): ...
    def __eq__(self, other): ...
    def __hash__(self): ...
    def __reduce__(self): ...
    pk: Incomplete
    def get_deferred_fields(self): ...
    def refresh_from_db(self, using: Incomplete | None = None, fields: Incomplete | None = None, from_queryset: Incomplete | None = None) -> None: ...
    async def arefresh_from_db(self, using: Incomplete | None = None, fields: Incomplete | None = None, from_queryset: Incomplete | None = None): ...
    def serializable_value(self, field_name): ...
    def save(self, *args, force_insert: bool = False, force_update: bool = False, using: Incomplete | None = None, update_fields: Incomplete | None = None) -> None: ...
    async def asave(self, *args, force_insert: bool = False, force_update: bool = False, using: Incomplete | None = None, update_fields: Incomplete | None = None): ...
    def save_base(self, raw: bool = False, force_insert: bool = False, force_update: bool = False, using: Incomplete | None = None, update_fields: Incomplete | None = None) -> None: ...
    def delete(self, using: Incomplete | None = None, keep_parents: bool = False): ...
    async def adelete(self, using: Incomplete | None = None, keep_parents: bool = False): ...
    def prepare_database_save(self, field): ...
    def clean(self) -> None: ...
    def validate_unique(self, exclude: Incomplete | None = None) -> None: ...
    def date_error_message(self, lookup_type, field_name, unique_for): ...
    def unique_error_message(self, model_class, unique_check): ...
    def get_constraints(self): ...
    def validate_constraints(self, exclude: Incomplete | None = None) -> None: ...
    def full_clean(self, exclude: Incomplete | None = None, validate_unique: bool = True, validate_constraints: bool = True) -> None: ...
    def clean_fields(self, exclude: Incomplete | None = None) -> None: ...
    @classmethod
    def check(cls, **kwargs): ...

def method_set_order(self, ordered_obj, id_list, using: Incomplete | None = None) -> None: ...
def method_get_order(self, ordered_obj): ...
def make_foreign_order_accessors(model, related_model) -> None: ...
def model_unpickle(model_id): ...

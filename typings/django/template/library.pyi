from .base import Node as Node, Template as Template, token_kwargs as token_kwargs
from .exceptions import TemplateSyntaxError as TemplateSyntaxError
from _typeshed import Incomplete
from django.utils.html import conditional_escape as conditional_escape

class InvalidTemplateLibrary(Exception): ...

class Library:
    filters: Incomplete
    tags: Incomplete
    def __init__(self) -> None: ...
    def tag(self, name: Incomplete | None = None, compile_function: Incomplete | None = None): ...
    def tag_function(self, func): ...
    def filter(self, name: Incomplete | None = None, filter_func: Incomplete | None = None, **flags): ...
    def filter_function(self, func, **flags): ...
    def simple_tag(self, func: Incomplete | None = None, takes_context: Incomplete | None = None, name: Incomplete | None = None): ...
    def inclusion_tag(self, filename, func: Incomplete | None = None, takes_context: Incomplete | None = None, name: Incomplete | None = None): ...

class TagHelperNode(Node):
    func: Incomplete
    takes_context: Incomplete
    args: Incomplete
    kwargs: Incomplete
    def __init__(self, func, takes_context, args, kwargs) -> None: ...
    def get_resolved_arguments(self, context): ...

class SimpleNode(TagHelperNode):
    child_nodelists: Incomplete
    target_var: Incomplete
    def __init__(self, func, takes_context, args, kwargs, target_var) -> None: ...
    def render(self, context): ...

class InclusionNode(TagHelperNode):
    filename: Incomplete
    def __init__(self, func, takes_context, args, kwargs, filename) -> None: ...
    def render(self, context): ...

def parse_bits(parser, bits, params, varargs, varkw, defaults, kwonly, kwonly_defaults, takes_context, name): ...
def import_library(name): ...

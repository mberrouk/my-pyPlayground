from .base import Template as Template
from .context import Context as Context
from .exceptions import TemplateDoesNotExist as TemplateDoesNotExist
from .library import import_library as import_library
from _typeshed import Incomplete
from django.core.exceptions import ImproperlyConfigured as ImproperlyConfigured
from django.utils.functional import cached_property as cached_property
from django.utils.module_loading import import_string as import_string

class Engine:
    default_builtins: Incomplete
    dirs: Incomplete
    app_dirs: Incomplete
    autoescape: Incomplete
    context_processors: Incomplete
    debug: Incomplete
    loaders: Incomplete
    string_if_invalid: Incomplete
    file_charset: Incomplete
    libraries: Incomplete
    template_libraries: Incomplete
    builtins: Incomplete
    template_builtins: Incomplete
    def __init__(self, dirs: Incomplete | None = None, app_dirs: bool = False, context_processors: Incomplete | None = None, debug: bool = False, loaders: Incomplete | None = None, string_if_invalid: str = '', file_charset: str = 'utf-8', libraries: Incomplete | None = None, builtins: Incomplete | None = None, autoescape: bool = True) -> None: ...
    @staticmethod
    def get_default(): ...
    def template_context_processors(self): ...
    def get_template_builtins(self, builtins): ...
    def get_template_libraries(self, libraries): ...
    def template_loaders(self): ...
    def get_template_loaders(self, template_loaders): ...
    def find_template_loader(self, loader): ...
    def find_template(self, name, dirs: Incomplete | None = None, skip: Incomplete | None = None): ...
    def from_string(self, template_code): ...
    def get_template(self, template_name): ...
    def render_to_string(self, template_name, context: Incomplete | None = None): ...
    def select_template(self, template_name_list): ...

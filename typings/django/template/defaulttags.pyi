from .base import BLOCK_TAG_END as BLOCK_TAG_END, BLOCK_TAG_START as BLOCK_TAG_START, COMMENT_TAG_END as COMMENT_TAG_END, COMMENT_TAG_START as COMMENT_TAG_START, FILTER_SEPARATOR as FILTER_SEPARATOR, Node as Node, NodeList as NodeList, SINGLE_BRACE_END as SINGLE_BRACE_END, SINGLE_BRACE_START as SINGLE_BRACE_START, TemplateSyntaxError as TemplateSyntaxError, VARIABLE_ATTRIBUTE_SEPARATOR as VARIABLE_ATTRIBUTE_SEPARATOR, VARIABLE_TAG_END as VARIABLE_TAG_END, VARIABLE_TAG_START as VARIABLE_TAG_START, VariableDoesNotExist as VariableDoesNotExist, kwarg_re as kwarg_re, render_value_in_context as render_value_in_context, token_kwargs as token_kwargs
from .context import Context as Context
from .defaultfilters import date as date
from .library import Library as Library
from .smartif import IfParser as IfParser, Literal as Literal
from _typeshed import Incomplete
from django.conf import settings as settings
from django.utils import timezone as timezone
from django.utils.html import conditional_escape as conditional_escape, escape as escape, format_html as format_html
from django.utils.lorem_ipsum import paragraphs as paragraphs, words as words
from django.utils.safestring import mark_safe as mark_safe
from typing import NamedTuple

register: Incomplete

class AutoEscapeControlNode(Node):
    setting: Incomplete
    nodelist: Incomplete
    def __init__(self, setting, nodelist) -> None: ...
    def render(self, context): ...

class CommentNode(Node):
    child_nodelists: Incomplete
    def render(self, context): ...

class CsrfTokenNode(Node):
    child_nodelists: Incomplete
    def render(self, context): ...

class CycleNode(Node):
    cyclevars: Incomplete
    variable_name: Incomplete
    silent: Incomplete
    def __init__(self, cyclevars, variable_name: Incomplete | None = None, silent: bool = False) -> None: ...
    def render(self, context): ...
    def reset(self, context) -> None: ...

class DebugNode(Node):
    def render(self, context): ...

class FilterNode(Node):
    filter_expr: Incomplete
    nodelist: Incomplete
    def __init__(self, filter_expr, nodelist) -> None: ...
    def render(self, context): ...

class FirstOfNode(Node):
    vars: Incomplete
    asvar: Incomplete
    def __init__(self, variables, asvar: Incomplete | None = None) -> None: ...
    def render(self, context): ...

class ForNode(Node):
    child_nodelists: Incomplete
    loopvars: Incomplete
    sequence: Incomplete
    is_reversed: Incomplete
    nodelist_loop: Incomplete
    nodelist_empty: Incomplete
    def __init__(self, loopvars, sequence, is_reversed, nodelist_loop, nodelist_empty: Incomplete | None = None) -> None: ...
    def render(self, context): ...

class IfChangedNode(Node):
    child_nodelists: Incomplete
    nodelist_true: Incomplete
    nodelist_false: Incomplete
    def __init__(self, nodelist_true, nodelist_false, *varlist) -> None: ...
    def render(self, context): ...

class IfNode(Node):
    conditions_nodelists: Incomplete
    def __init__(self, conditions_nodelists) -> None: ...
    def __iter__(self): ...
    @property
    def nodelist(self): ...
    def render(self, context): ...

class LoremNode(Node):
    count: Incomplete
    method: Incomplete
    common: Incomplete
    def __init__(self, count, method, common) -> None: ...
    def render(self, context): ...

class GroupedResult(NamedTuple):
    grouper: Incomplete
    list: Incomplete

class RegroupNode(Node):
    target: Incomplete
    expression: Incomplete
    var_name: Incomplete
    def __init__(self, target, expression, var_name) -> None: ...
    def resolve_expression(self, obj, context): ...
    def render(self, context): ...

class LoadNode(Node):
    child_nodelists: Incomplete
    def render(self, context): ...

class NowNode(Node):
    format_string: Incomplete
    asvar: Incomplete
    def __init__(self, format_string, asvar: Incomplete | None = None) -> None: ...
    def render(self, context): ...

class ResetCycleNode(Node):
    node: Incomplete
    def __init__(self, node) -> None: ...
    def render(self, context): ...

class SpacelessNode(Node):
    nodelist: Incomplete
    def __init__(self, nodelist) -> None: ...
    def render(self, context): ...

class TemplateTagNode(Node):
    mapping: Incomplete
    tagtype: Incomplete
    def __init__(self, tagtype) -> None: ...
    def render(self, context): ...

class URLNode(Node):
    child_nodelists: Incomplete
    view_name: Incomplete
    args: Incomplete
    kwargs: Incomplete
    asvar: Incomplete
    def __init__(self, view_name, args, kwargs, asvar) -> None: ...
    def render(self, context): ...

class VerbatimNode(Node):
    content: Incomplete
    def __init__(self, content) -> None: ...
    def render(self, context): ...

class WidthRatioNode(Node):
    val_expr: Incomplete
    max_expr: Incomplete
    max_width: Incomplete
    asvar: Incomplete
    def __init__(self, val_expr, max_expr, max_width, asvar: Incomplete | None = None) -> None: ...
    def render(self, context): ...

class WithNode(Node):
    nodelist: Incomplete
    extra_context: Incomplete
    def __init__(self, var, name, nodelist, extra_context: Incomplete | None = None) -> None: ...
    def render(self, context): ...

def autoescape(parser, token): ...
def comment(parser, token): ...
def cycle(parser, token): ...
def csrf_token(parser, token): ...
def debug(parser, token): ...
def do_filter(parser, token): ...
def firstof(parser, token): ...
def do_for(parser, token): ...

class TemplateLiteral(Literal):
    value: Incomplete
    text: Incomplete
    def __init__(self, value, text) -> None: ...
    def display(self): ...
    def eval(self, context): ...

class TemplateIfParser(IfParser):
    error_class = TemplateSyntaxError
    template_parser: Incomplete
    def __init__(self, parser, *args, **kwargs) -> None: ...
    def create_var(self, value): ...

def do_if(parser, token): ...
def ifchanged(parser, token): ...
def find_library(parser, name): ...
def load_from_library(library, label, names): ...
def load(parser, token): ...
def lorem(parser, token): ...
def now(parser, token): ...
def querystring(context, query_dict: Incomplete | None = None, **kwargs): ...
def regroup(parser, token): ...
def resetcycle(parser, token): ...
def spaceless(parser, token): ...
def templatetag(parser, token): ...
def url(parser, token): ...
def verbatim(parser, token): ...
def widthratio(parser, token): ...
def do_with(parser, token): ...

from .base import Node as Node, Template as Template, TemplateSyntaxError as TemplateSyntaxError, TextNode as TextNode, Variable as Variable, token_kwargs as token_kwargs
from .library import Library as Library
from _typeshed import Incomplete
from django.utils.safestring import mark_safe as mark_safe

register: Incomplete
BLOCK_CONTEXT_KEY: str

class BlockContext:
    blocks: Incomplete
    def __init__(self) -> None: ...
    def add_blocks(self, blocks) -> None: ...
    def pop(self, name): ...
    def push(self, name, block) -> None: ...
    def get_block(self, name): ...

class BlockNode(Node):
    name: Incomplete
    nodelist: Incomplete
    parent: Incomplete
    def __init__(self, name, nodelist, parent: Incomplete | None = None) -> None: ...
    def render(self, context): ...
    def super(self): ...

class ExtendsNode(Node):
    must_be_first: bool
    context_key: str
    nodelist: Incomplete
    parent_name: Incomplete
    template_dirs: Incomplete
    blocks: Incomplete
    def __init__(self, nodelist, parent_name, template_dirs: Incomplete | None = None) -> None: ...
    def find_template(self, template_name, context): ...
    def get_parent(self, context): ...
    def render(self, context): ...

class IncludeNode(Node):
    context_key: str
    template: Incomplete
    extra_context: Incomplete
    isolated_context: Incomplete
    def __init__(self, template, *args, extra_context: Incomplete | None = None, isolated_context: bool = False, **kwargs) -> None: ...
    def render(self, context): ...

def do_block(parser, token): ...
def construct_relative_path(current_template_name, relative_name): ...
def do_extends(parser, token): ...
def do_include(parser, token): ...

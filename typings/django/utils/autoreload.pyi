from _typeshed import Incomplete
from collections.abc import Generator
from django.apps import apps as apps
from django.core.signals import request_finished as request_finished
from django.dispatch import Signal as Signal
from django.utils.functional import cached_property as cached_property
from django.utils.version import get_version_tuple as get_version_tuple

autoreload_started: Incomplete
file_changed: Incomplete
DJANGO_AUTORELOAD_ENV: str
logger: Incomplete

def is_django_module(module): ...
def is_django_path(path): ...
def check_errors(fn): ...
def raise_last_exception() -> None: ...
def ensure_echo_on() -> None: ...
def iter_all_python_module_files(): ...
def iter_modules_and_files(modules, extra_files): ...
def common_roots(paths): ...
def sys_path_directories() -> Generator[Incomplete]: ...
def get_child_arguments(): ...
def trigger_reload(filename) -> None: ...
def restart_with_reloader(): ...

class BaseReloader:
    extra_files: Incomplete
    directory_globs: Incomplete
    def __init__(self) -> None: ...
    def watch_dir(self, path, glob) -> None: ...
    def watched_files(self, include_globs: bool = True) -> Generator[Incomplete, Incomplete]: ...
    def wait_for_apps_ready(self, app_reg, django_main_thread): ...
    def run(self, django_main_thread) -> None: ...
    def run_loop(self) -> None: ...
    def tick(self) -> None: ...
    @classmethod
    def check_availability(cls) -> None: ...
    def notify_file_changed(self, path) -> None: ...
    @property
    def should_stop(self): ...
    def stop(self) -> None: ...

class StatReloader(BaseReloader):
    SLEEP_TIME: int
    def tick(self) -> Generator[None]: ...
    def snapshot_files(self) -> Generator[Incomplete]: ...
    @classmethod
    def check_availability(cls): ...

class WatchmanUnavailable(RuntimeError): ...

class WatchmanReloader(BaseReloader):
    roots: Incomplete
    processed_request: Incomplete
    client_timeout: Incomplete
    def __init__(self) -> None: ...
    def client(self): ...
    def watched_roots(self, watched_files): ...
    def update_watches(self) -> None: ...
    def request_processed(self, **kwargs) -> None: ...
    def tick(self) -> Generator[None]: ...
    def stop(self) -> None: ...
    def check_server_status(self, inner_ex: Incomplete | None = None): ...
    @classmethod
    def check_availability(cls) -> None: ...

def get_reloader(): ...
def start_django(reloader, main_func, *args, **kwargs) -> None: ...
def run_with_reloader(main_func, *args, **kwargs): ...

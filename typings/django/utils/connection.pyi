from _typeshed import Incomplete
from django.utils.functional import cached_property as cached_property

class ConnectionProxy:
    def __init__(self, connections, alias) -> None: ...
    def __getattr__(self, item): ...
    def __setattr__(self, name, value): ...
    def __delattr__(self, name): ...
    def __contains__(self, key) -> bool: ...
    def __eq__(self, other): ...

class ConnectionDoesNotExist(Exception): ...

class BaseConnectionHandler:
    settings_name: Incomplete
    exception_class = ConnectionDoesNotExist
    thread_critical: bool
    def __init__(self, settings: Incomplete | None = None) -> None: ...
    def settings(self): ...
    def configure_settings(self, settings): ...
    def create_connection(self, alias) -> None: ...
    def __getitem__(self, alias): ...
    def __setitem__(self, key, value) -> None: ...
    def __delitem__(self, key) -> None: ...
    def __iter__(self): ...
    def all(self, initialized_only: bool = False): ...
    def close_all(self) -> None: ...

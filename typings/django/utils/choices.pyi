from _typeshed import Incomplete
from collections.abc import Generator

__all__ = ['BaseChoiceIterator', 'BlankChoiceIterator', 'CallableChoiceIterator', 'flatten_choices', 'normalize_choices']

class BaseChoiceIterator:
    def __eq__(self, other): ...
    def __getitem__(self, index): ...
    def __iter__(self): ...

class BlankChoiceIterator(BaseChoiceIterator):
    choices: Incomplete
    blank_choice: Incomplete
    def __init__(self, choices, blank_choice) -> None: ...
    def __iter__(self): ...

class CallableChoiceIterator(BaseChoiceIterator):
    func: Incomplete
    def __init__(self, func) -> None: ...
    def __iter__(self): ...

def flatten_choices(choices) -> Generator[Incomplete, Incomplete]: ...
def normalize_choices(value, *, depth: int = 0): ...

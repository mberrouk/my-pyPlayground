from _typeshed import Incomplete
from django.utils.hashable import make_hashable as make_hashable

class Node:
    default: str
    children: Incomplete
    connector: Incomplete
    negated: Incomplete
    def __init__(self, children: Incomplete | None = None, connector: Incomplete | None = None, negated: bool = False) -> None: ...
    @classmethod
    def create(cls, children: Incomplete | None = None, connector: Incomplete | None = None, negated: bool = False): ...
    def __copy__(self): ...
    copy = __copy__
    def __deepcopy__(self, memodict): ...
    def __len__(self) -> int: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, other) -> bool: ...
    def __eq__(self, other): ...
    def __hash__(self): ...
    def add(self, data, conn_type): ...
    def negate(self) -> None: ...

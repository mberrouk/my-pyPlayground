from _typeshed import Incomplete

class cached_property:
    name: Incomplete
    @staticmethod
    def func(instance) -> None: ...
    real_func: Incomplete
    __doc__: Incomplete
    def __init__(self, func) -> None: ...
    def __set_name__(self, owner, name) -> None: ...
    def __get__(self, instance, cls: Incomplete | None = None): ...

class classproperty:
    fget: Incomplete
    def __init__(self, method: Incomplete | None = None) -> None: ...
    def __get__(self, instance, cls: Incomplete | None = None): ...
    def getter(self, method): ...

class Promise: ...

def lazy(func, *resultclasses): ...
def lazystr(text): ...
def keep_lazy(*resultclasses): ...
def keep_lazy_text(func): ...

empty: Incomplete

def new_method_proxy(func): ...

class LazyObject:
    def __init__(self) -> None: ...
    def __getattribute__(self, name): ...
    __getattr__: Incomplete
    def __setattr__(self, name, value) -> None: ...
    def __delattr__(self, name) -> None: ...
    def __reduce__(self): ...
    def __copy__(self): ...
    def __deepcopy__(self, memo): ...
    __bytes__: Incomplete
    __bool__: Incomplete
    __dir__: Incomplete
    __class__: Incomplete
    __eq__: Incomplete
    __lt__: Incomplete
    __gt__: Incomplete
    __ne__: Incomplete
    __hash__: Incomplete
    __getitem__: Incomplete
    __setitem__: Incomplete
    __delitem__: Incomplete
    __iter__: Incomplete
    __len__: Incomplete
    __contains__: Incomplete

def unpickle_lazyobject(wrapped): ...

class SimpleLazyObject(LazyObject):
    def __init__(self, func) -> None: ...
    def __copy__(self): ...
    def __deepcopy__(self, memo): ...
    __add__: Incomplete
    def __radd__(self, other): ...

def partition(predicate, values): ...

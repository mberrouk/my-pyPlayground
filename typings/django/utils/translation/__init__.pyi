from _typeshed import Incomplete
from contextlib import ContextDecorator

__all__ = ['activate', 'deactivate', 'override', 'deactivate_all', 'get_language', 'get_language_from_request', 'get_language_info', 'get_language_bidi', 'check_for_language', 'to_language', 'to_locale', 'templatize', 'gettext', 'gettext_lazy', 'gettext_noop', 'ngettext', 'ngettext_lazy', 'pgettext', 'pgettext_lazy', 'npgettext', 'npgettext_lazy']

class TranslatorCommentWarning(SyntaxWarning): ...

class Trans:
    def __getattr__(self, real_name): ...

def gettext_noop(message): ...
def gettext(message): ...
def ngettext(singular, plural, number): ...
def pgettext(context, message): ...
def npgettext(context, singular, plural, number): ...

gettext_lazy: Incomplete
pgettext_lazy: Incomplete

def ngettext_lazy(singular, plural, number: Incomplete | None = None): ...
def npgettext_lazy(context, singular, plural, number: Incomplete | None = None): ...
def activate(language): ...
def deactivate(): ...

class override(ContextDecorator):
    language: Incomplete
    deactivate: Incomplete
    def __init__(self, language, deactivate: bool = False) -> None: ...
    old_language: Incomplete
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, traceback: types.TracebackType | None) -> None: ...

def get_language(): ...
def get_language_bidi(): ...
def check_for_language(lang_code): ...
def to_language(locale): ...
def to_locale(language): ...
def get_language_from_request(request, check_path: bool = False): ...
def templatize(src, **kwargs): ...
def deactivate_all(): ...
def get_language_info(lang_code): ...

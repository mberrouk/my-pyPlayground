from _typeshed import Incomplete
from django.core.exceptions import SuspiciousOperation as SuspiciousOperation
from django.utils.deprecation import RemovedInDjango60Warning as RemovedInDjango60Warning
from django.utils.encoding import punycode as punycode
from django.utils.functional import Promise as Promise, cached_property as cached_property, keep_lazy as keep_lazy, keep_lazy_text as keep_lazy_text
from django.utils.http import RFC3986_GENDELIMS as RFC3986_GENDELIMS, RFC3986_SUBDELIMS as RFC3986_SUBDELIMS
from django.utils.safestring import SafeData as SafeData, SafeString as SafeString, mark_safe as mark_safe
from django.utils.text import normalize_newlines as normalize_newlines
from html.parser import HTMLParser

VOID_ELEMENTS: Incomplete
MAX_URL_LENGTH: int
MAX_STRIP_TAGS_DEPTH: int

def escape(text): ...
def escapejs(value): ...
def json_script(value, element_id: Incomplete | None = None, encoder: Incomplete | None = None): ...
def conditional_escape(text): ...
def format_html(format_string, *args, **kwargs): ...
def format_html_join(sep, format_string, args_generator): ...
def linebreaks(value, autoescape: bool = False): ...

class MLStripper(HTMLParser):
    fed: Incomplete
    def __init__(self) -> None: ...
    def handle_data(self, d) -> None: ...
    def handle_entityref(self, name) -> None: ...
    def handle_charref(self, name) -> None: ...
    def get_data(self): ...

def strip_tags(value): ...
def strip_spaces_between_tags(value): ...
def smart_urlquote(url): ...

class CountsDict(dict):
    word: Incomplete
    def __init__(self, *args, word, **kwargs) -> None: ...
    def __missing__(self, key): ...

class Urlizer:
    trailing_punctuation_chars: str
    wrapping_punctuation: Incomplete
    simple_url_re: Incomplete
    simple_url_2_re: Incomplete
    word_split_re: Incomplete
    mailto_template: str
    url_template: str
    def __call__(self, text, trim_url_limit: Incomplete | None = None, nofollow: bool = False, autoescape: bool = False): ...
    def handle_word(self, word, *, safe_input, trim_url_limit: Incomplete | None = None, nofollow: bool = False, autoescape: bool = False): ...
    def trim_url(self, x, *, limit): ...
    def wrapping_punctuation_openings(self): ...
    def trailing_punctuation_chars_no_semicolon(self): ...
    def trailing_punctuation_chars_has_semicolon(self): ...
    def trim_punctuation(self, word): ...
    @staticmethod
    def is_email_simple(value): ...

urlizer: Incomplete

def urlize(text, trim_url_limit: Incomplete | None = None, nofollow: bool = False, autoescape: bool = False): ...
def avoid_wrapping(value): ...
def html_safe(klass): ...

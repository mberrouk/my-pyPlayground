from _typeshed import Incomplete
from django.conf import settings as settings
from django.core import signing as signing
from django.utils import timezone as timezone
from django.utils.crypto import get_random_string as get_random_string
from django.utils.module_loading import import_string as import_string

VALID_KEY_CHARS: Incomplete

class CreateError(Exception): ...
class UpdateError(Exception): ...

class SessionBase:
    TEST_COOKIE_NAME: str
    TEST_COOKIE_VALUE: str
    accessed: bool
    modified: bool
    serializer: Incomplete
    def __init__(self, session_key: Incomplete | None = None) -> None: ...
    def __contains__(self, key) -> bool: ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value) -> None: ...
    async def aset(self, key, value) -> None: ...
    def __delitem__(self, key) -> None: ...
    @property
    def key_salt(self): ...
    def get(self, key, default: Incomplete | None = None): ...
    async def aget(self, key, default: Incomplete | None = None): ...
    def pop(self, key, default=...): ...
    async def apop(self, key, default=...): ...
    def setdefault(self, key, value): ...
    async def asetdefault(self, key, value): ...
    def set_test_cookie(self) -> None: ...
    async def aset_test_cookie(self) -> None: ...
    def test_cookie_worked(self): ...
    async def atest_cookie_worked(self): ...
    def delete_test_cookie(self) -> None: ...
    async def adelete_test_cookie(self) -> None: ...
    def encode(self, session_dict): ...
    def decode(self, session_data): ...
    def update(self, dict_) -> None: ...
    async def aupdate(self, dict_) -> None: ...
    def has_key(self, key): ...
    async def ahas_key(self, key): ...
    def keys(self): ...
    async def akeys(self): ...
    def values(self): ...
    async def avalues(self): ...
    def items(self): ...
    async def aitems(self): ...
    def clear(self) -> None: ...
    def is_empty(self): ...
    session_key: Incomplete
    def get_session_cookie_age(self): ...
    def get_expiry_age(self, **kwargs): ...
    async def aget_expiry_age(self, **kwargs): ...
    def get_expiry_date(self, **kwargs): ...
    async def aget_expiry_date(self, **kwargs): ...
    def set_expiry(self, value) -> None: ...
    async def aset_expiry(self, value) -> None: ...
    def get_expire_at_browser_close(self): ...
    async def aget_expire_at_browser_close(self): ...
    def flush(self) -> None: ...
    async def aflush(self) -> None: ...
    def cycle_key(self) -> None: ...
    async def acycle_key(self) -> None: ...
    def exists(self, session_key) -> None: ...
    async def aexists(self, session_key): ...
    def create(self) -> None: ...
    async def acreate(self): ...
    def save(self, must_create: bool = False) -> None: ...
    async def asave(self, must_create: bool = False): ...
    def delete(self, session_key: Incomplete | None = None) -> None: ...
    async def adelete(self, session_key: Incomplete | None = None): ...
    def load(self) -> None: ...
    async def aload(self): ...
    @classmethod
    def clear_expired(cls) -> None: ...
    @classmethod
    async def aclear_expired(cls): ...

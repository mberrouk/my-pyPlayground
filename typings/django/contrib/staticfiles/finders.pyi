from _typeshed import Incomplete
from collections.abc import Generator
from django.apps import apps as apps
from django.conf import settings as settings
from django.contrib.staticfiles import utils as utils
from django.core.checks import Error as Error, Warning as Warning
from django.core.exceptions import ImproperlyConfigured as ImproperlyConfigured
from django.core.files.storage import FileSystemStorage as FileSystemStorage, Storage as Storage, default_storage as default_storage
from django.utils._os import safe_join as safe_join
from django.utils.functional import LazyObject as LazyObject, empty as empty
from django.utils.module_loading import import_string as import_string

searched_locations: Incomplete

class BaseFinder:
    def check(self, **kwargs) -> None: ...
    def find(self, path, all: bool = False) -> None: ...
    def list(self, ignore_patterns) -> None: ...

class FileSystemFinder(BaseFinder):
    locations: Incomplete
    storages: Incomplete
    def __init__(self, app_names: Incomplete | None = None, *args, **kwargs) -> None: ...
    def check(self, **kwargs): ...
    def find(self, path, all: bool = False): ...
    def find_location(self, root, path, prefix: Incomplete | None = None): ...
    def list(self, ignore_patterns) -> Generator[Incomplete]: ...

class AppDirectoriesFinder(BaseFinder):
    storage_class = FileSystemStorage
    source_dir: str
    apps: Incomplete
    storages: Incomplete
    def __init__(self, app_names: Incomplete | None = None, *args, **kwargs) -> None: ...
    def list(self, ignore_patterns) -> Generator[Incomplete]: ...
    def find(self, path, all: bool = False): ...
    def find_in_app(self, app, path): ...

class BaseStorageFinder(BaseFinder):
    storage: Incomplete
    def __init__(self, storage: Incomplete | None = None, *args, **kwargs) -> None: ...
    def find(self, path, all: bool = False): ...
    def list(self, ignore_patterns) -> Generator[Incomplete]: ...

class DefaultStorageFinder(BaseStorageFinder):
    storage = default_storage
    def __init__(self, *args, **kwargs) -> None: ...

def find(path, all: bool = False): ...
def get_finders() -> Generator[Incomplete]: ...
def get_finder(import_path): ...

from .adapter import PostGISAdapter as PostGISAdapter
from .models import PostGISGeometryColumns as PostGISGeometryColumns, PostGISSpatialRefSys as PostGISSpatialRefSys
from .pgraster import from_pgraster as from_pgraster
from _typeshed import Incomplete
from django.conf import settings as settings
from django.contrib.gis.db.backends.base.operations import BaseSpatialOperations as BaseSpatialOperations
from django.contrib.gis.db.backends.utils import SpatialOperator as SpatialOperator
from django.contrib.gis.db.models import GeometryField as GeometryField, RasterField as RasterField
from django.contrib.gis.gdal import GDALRaster as GDALRaster
from django.contrib.gis.geos.geometry import GEOSGeometryBase as GEOSGeometryBase
from django.contrib.gis.geos.prototypes.io import wkb_r as wkb_r
from django.contrib.gis.measure import Distance as Distance
from django.core.exceptions import ImproperlyConfigured as ImproperlyConfigured
from django.db import NotSupportedError as NotSupportedError, ProgrammingError as ProgrammingError
from django.db.backends.postgresql.operations import DatabaseOperations as DatabaseOperations
from django.db.backends.postgresql.psycopg_any import is_psycopg3 as is_psycopg3
from django.db.models import Func as Func, Value as Value
from django.utils.functional import cached_property as cached_property
from django.utils.version import get_version_tuple as get_version_tuple

BILATERAL: str

class PostGISOperator(SpatialOperator):
    geography: Incomplete
    raster: Incomplete
    def __init__(self, geography: bool = False, raster: bool = False, **kwargs) -> None: ...
    def as_sql(self, connection, lookup, template_params, *args): ...
    def check_raster(self, lookup, template_params): ...
    def check_geography(self, lookup, template_params): ...

class ST_Polygon(Func):
    function: str
    def __init__(self, expr) -> None: ...
    def output_field(self): ...

class PostGISOperations(BaseSpatialOperations, DatabaseOperations):
    name: str
    postgis: bool
    geom_func_prefix: str
    Adapter = PostGISAdapter
    collect: Incomplete
    extent: Incomplete
    extent3d: Incomplete
    length3d: Incomplete
    makeline: Incomplete
    perimeter3d: Incomplete
    unionagg: Incomplete
    gis_operators: Incomplete
    unsupported_functions: Incomplete
    select: Incomplete
    select_extent: Incomplete
    def function_names(self): ...
    def spatial_version(self): ...
    def convert_extent(self, box): ...
    def convert_extent3d(self, box3d): ...
    def geo_db_type(self, f): ...
    def get_distance(self, f, dist_val, lookup_type): ...
    def get_geom_placeholder(self, f, value, compiler): ...
    def postgis_geos_version(self): ...
    def postgis_lib_version(self): ...
    def postgis_proj_version(self): ...
    def postgis_version(self): ...
    def postgis_full_version(self): ...
    def postgis_version_tuple(self): ...
    def proj_version_tuple(self): ...
    def spatial_aggregate_name(self, agg_name): ...
    def geometry_columns(self): ...
    def spatial_ref_sys(self): ...
    def parse_raster(self, value): ...
    def distance_expr_for_lookup(self, lhs, rhs, **kwargs): ...
    def get_geometry_converter(self, expression): ...
    def get_area_att_for_field(self, field): ...

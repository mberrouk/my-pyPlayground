from _typeshed import Incomplete

__all__ = ['A', 'Area', 'D', 'Distance']

class MeasureBase:
    STANDARD_UNIT: Incomplete
    ALIAS: Incomplete
    UNITS: Incomplete
    LALIAS: Incomplete
    def __init__(self, default_unit: Incomplete | None = None, **kwargs) -> None: ...
    standard: Incomplete
    def __getattr__(self, name): ...
    def __eq__(self, other): ...
    def __hash__(self): ...
    def __lt__(self, other): ...
    def __add__(self, other): ...
    def __iadd__(self, other): ...
    def __sub__(self, other): ...
    def __isub__(self, other): ...
    def __mul__(self, other): ...
    def __imul__(self, other): ...
    def __rmul__(self, other): ...
    def __truediv__(self, other): ...
    def __itruediv__(self, other): ...
    def __bool__(self) -> bool: ...
    def default_units(self, kwargs): ...
    @classmethod
    def unit_attname(cls, unit_str): ...

class Distance(MeasureBase):
    STANDARD_UNIT: str
    UNITS: Incomplete
    ALIAS: Incomplete
    LALIAS: Incomplete
    def __mul__(self, other): ...

class Area(MeasureBase):
    STANDARD_UNIT: Incomplete
    UNITS: Incomplete
    ALIAS: Incomplete
    LALIAS: Incomplete
    def __truediv__(self, other): ...
D = Distance
A = Area

from .base import InclusionAdminNode as InclusionAdminNode
from _typeshed import Incomplete
from collections.abc import Generator
from django.contrib.admin.templatetags.admin_urls import add_preserved_filters as add_preserved_filters
from django.contrib.admin.utils import display_for_field as display_for_field, display_for_value as display_for_value, get_fields_from_path as get_fields_from_path, label_for_field as label_for_field, lookup_field as lookup_field
from django.contrib.admin.views.main import ALL_VAR as ALL_VAR, IS_FACETS_VAR as IS_FACETS_VAR, IS_POPUP_VAR as IS_POPUP_VAR, ORDER_VAR as ORDER_VAR, PAGE_VAR as PAGE_VAR, SEARCH_VAR as SEARCH_VAR
from django.core.exceptions import ObjectDoesNotExist as ObjectDoesNotExist
from django.db import models as models
from django.db.models.constants import LOOKUP_SEP as LOOKUP_SEP
from django.template import Library as Library
from django.template.loader import get_template as get_template
from django.templatetags.static import static as static
from django.urls import NoReverseMatch as NoReverseMatch
from django.utils import formats as formats, timezone as timezone
from django.utils.html import format_html as format_html
from django.utils.safestring import mark_safe as mark_safe
from django.utils.text import capfirst as capfirst

register: Incomplete

def paginator_number(cl, i): ...
def pagination(cl): ...
def pagination_tag(parser, token): ...
def result_headers(cl) -> Generator[Incomplete, None, Incomplete]: ...
def items_for_result(cl, result, form) -> Generator[Incomplete, None, Incomplete]: ...

class ResultList(list):
    form: Incomplete
    def __init__(self, form, *items) -> None: ...

def results(cl) -> Generator[Incomplete]: ...
def result_hidden_fields(cl) -> Generator[Incomplete]: ...
def result_list(cl): ...
def result_list_tag(parser, token): ...
def date_hierarchy(cl): ...
def date_hierarchy_tag(parser, token): ...
def search_form(cl): ...
def search_form_tag(parser, token): ...
def admin_list_filter(cl, spec): ...
def admin_actions(context): ...
def admin_actions_tag(parser, token): ...
def change_list_object_tools_tag(parser, token): ...

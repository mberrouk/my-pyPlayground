import enum
from _typeshed import Incomplete
from collections.abc import Generator
from django import forms as forms
from django.conf import settings as settings
from django.contrib import messages as messages
from django.contrib.admin import helpers as helpers, widgets as widgets
from django.contrib.admin.checks import BaseModelAdminChecks as BaseModelAdminChecks, InlineModelAdminChecks as InlineModelAdminChecks, ModelAdminChecks as ModelAdminChecks
from django.contrib.admin.exceptions import DisallowedModelAdminToField as DisallowedModelAdminToField, NotRegistered as NotRegistered
from django.contrib.admin.templatetags.admin_urls import add_preserved_filters as add_preserved_filters
from django.contrib.admin.utils import NestedObjects as NestedObjects, construct_change_message as construct_change_message, flatten_fieldsets as flatten_fieldsets, get_deleted_objects as get_deleted_objects, lookup_spawns_duplicates as lookup_spawns_duplicates, model_format_dict as model_format_dict, model_ngettext as model_ngettext, quote as quote, unquote as unquote
from django.contrib.admin.widgets import AutocompleteSelect as AutocompleteSelect, AutocompleteSelectMultiple as AutocompleteSelectMultiple
from django.contrib.auth import get_permission_codename as get_permission_codename
from django.core.exceptions import FieldDoesNotExist as FieldDoesNotExist, FieldError as FieldError, PermissionDenied as PermissionDenied, ValidationError as ValidationError
from django.core.paginator import Paginator as Paginator
from django.db import models as models, router as router, transaction as transaction
from django.db.models.constants import LOOKUP_SEP as LOOKUP_SEP
from django.forms.formsets import DELETION_FIELD_NAME as DELETION_FIELD_NAME, all_valid as all_valid
from django.forms.models import BaseInlineFormSet as BaseInlineFormSet, inlineformset_factory as inlineformset_factory, modelform_defines_fields as modelform_defines_fields, modelform_factory as modelform_factory, modelformset_factory as modelformset_factory
from django.forms.widgets import CheckboxSelectMultiple as CheckboxSelectMultiple, SelectMultiple as SelectMultiple
from django.http import HttpResponseRedirect as HttpResponseRedirect
from django.http.response import HttpResponseBase as HttpResponseBase
from django.template.response import SimpleTemplateResponse as SimpleTemplateResponse, TemplateResponse as TemplateResponse
from django.urls import reverse as reverse
from django.utils.decorators import method_decorator as method_decorator
from django.utils.deprecation import RemovedInDjango60Warning as RemovedInDjango60Warning
from django.utils.html import format_html as format_html
from django.utils.http import urlencode as urlencode
from django.utils.safestring import mark_safe as mark_safe
from django.utils.text import capfirst as capfirst, format_lazy as format_lazy, get_text_list as get_text_list, smart_split as smart_split, unescape_string_literal as unescape_string_literal
from django.utils.translation import ngettext as ngettext
from django.views.decorators.csrf import csrf_protect as csrf_protect
from django.views.generic import RedirectView as RedirectView

IS_POPUP_VAR: str
TO_FIELD_VAR: str
IS_FACETS_VAR: str

class ShowFacets(enum.Enum):
    NEVER = 'NEVER'
    ALLOW = 'ALLOW'
    ALWAYS = 'ALWAYS'

HORIZONTAL: Incomplete
VERTICAL: Incomplete

def get_content_type_for_model(obj): ...
def get_ul_class(radio_style): ...

class IncorrectLookupParameters(Exception): ...

FORMFIELD_FOR_DBFIELD_DEFAULTS: Incomplete
csrf_protect_m: Incomplete

class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
    autocomplete_fields: Incomplete
    raw_id_fields: Incomplete
    fields: Incomplete
    exclude: Incomplete
    fieldsets: Incomplete
    form = forms.ModelForm
    filter_vertical: Incomplete
    filter_horizontal: Incomplete
    radio_fields: Incomplete
    prepopulated_fields: Incomplete
    formfield_overrides: Incomplete
    readonly_fields: Incomplete
    ordering: Incomplete
    sortable_by: Incomplete
    view_on_site: bool
    show_full_result_count: bool
    checks_class = BaseModelAdminChecks
    def check(self, **kwargs): ...
    def __init__(self) -> None: ...
    def formfield_for_dbfield(self, db_field, request, **kwargs): ...
    def formfield_for_choice_field(self, db_field, request, **kwargs): ...
    def get_field_queryset(self, db, db_field, request): ...
    def formfield_for_foreignkey(self, db_field, request, **kwargs): ...
    def formfield_for_manytomany(self, db_field, request, **kwargs): ...
    def get_autocomplete_fields(self, request): ...
    def get_view_on_site_url(self, obj: Incomplete | None = None): ...
    def get_empty_value_display(self): ...
    def get_exclude(self, request, obj: Incomplete | None = None): ...
    def get_fields(self, request, obj: Incomplete | None = None): ...
    def get_fieldsets(self, request, obj: Incomplete | None = None): ...
    def get_inlines(self, request, obj): ...
    def get_ordering(self, request): ...
    def get_readonly_fields(self, request, obj: Incomplete | None = None): ...
    def get_prepopulated_fields(self, request, obj: Incomplete | None = None): ...
    def get_queryset(self, request): ...
    def get_sortable_by(self, request): ...
    def lookup_allowed(self, lookup, value, request: Incomplete | None = None): ...
    def to_field_allowed(self, request, to_field): ...
    def has_add_permission(self, request): ...
    def has_change_permission(self, request, obj: Incomplete | None = None): ...
    def has_delete_permission(self, request, obj: Incomplete | None = None): ...
    def has_view_permission(self, request, obj: Incomplete | None = None): ...
    def has_view_or_change_permission(self, request, obj: Incomplete | None = None): ...
    def has_module_permission(self, request): ...

class ModelAdmin(BaseModelAdmin):
    list_display: Incomplete
    list_display_links: Incomplete
    list_filter: Incomplete
    list_select_related: bool
    list_per_page: int
    list_max_show_all: int
    list_editable: Incomplete
    search_fields: Incomplete
    search_help_text: Incomplete
    date_hierarchy: Incomplete
    save_as: bool
    save_as_continue: bool
    save_on_top: bool
    paginator = Paginator
    preserve_filters: bool
    show_facets: Incomplete
    inlines: Incomplete
    add_form_template: Incomplete
    change_form_template: Incomplete
    change_list_template: Incomplete
    delete_confirmation_template: Incomplete
    delete_selected_confirmation_template: Incomplete
    object_history_template: Incomplete
    popup_response_template: Incomplete
    actions: Incomplete
    action_form: Incomplete
    actions_on_top: bool
    actions_on_bottom: bool
    actions_selection_counter: bool
    checks_class = ModelAdminChecks
    model: Incomplete
    opts: Incomplete
    admin_site: Incomplete
    def __init__(self, model, admin_site) -> None: ...
    def get_inline_instances(self, request, obj: Incomplete | None = None): ...
    def get_urls(self): ...
    @property
    def urls(self): ...
    @property
    def media(self): ...
    def get_model_perms(self, request): ...
    def get_form(self, request, obj: Incomplete | None = None, change: bool = False, **kwargs): ...
    def get_changelist(self, request, **kwargs): ...
    def get_changelist_instance(self, request): ...
    def get_object(self, request, object_id, from_field: Incomplete | None = None): ...
    def get_changelist_form(self, request, **kwargs): ...
    def get_changelist_formset(self, request, **kwargs): ...
    def get_formsets_with_inlines(self, request, obj: Incomplete | None = None) -> Generator[Incomplete]: ...
    def get_paginator(self, request, queryset, per_page, orphans: int = 0, allow_empty_first_page: bool = True): ...
    def log_addition(self, request, obj, message): ...
    def log_change(self, request, obj, message): ...
    def log_deletion(self, request, obj, object_repr): ...
    def log_deletions(self, request, queryset): ...
    def action_checkbox(self, obj): ...
    def get_actions(self, request): ...
    def get_action_choices(self, request, default_choices=...): ...
    def get_action(self, action): ...
    def get_list_display(self, request): ...
    def get_list_display_links(self, request, list_display): ...
    def get_list_filter(self, request): ...
    def get_list_select_related(self, request): ...
    def get_search_fields(self, request): ...
    def get_search_results(self, request, queryset, search_term): ...
    def get_preserved_filters(self, request): ...
    def construct_change_message(self, request, form, formsets, add: bool = False): ...
    def message_user(self, request, message, level=..., extra_tags: str = '', fail_silently: bool = False) -> None: ...
    def save_form(self, request, form, change): ...
    def save_model(self, request, obj, form, change) -> None: ...
    def delete_model(self, request, obj) -> None: ...
    def delete_queryset(self, request, queryset) -> None: ...
    def save_formset(self, request, form, formset, change) -> None: ...
    def save_related(self, request, form, formsets, change) -> None: ...
    def render_change_form(self, request, context, add: bool = False, change: bool = False, form_url: str = '', obj: Incomplete | None = None): ...
    def response_add(self, request, obj, post_url_continue: Incomplete | None = None): ...
    def response_change(self, request, obj): ...
    def response_post_save_add(self, request, obj): ...
    def response_post_save_change(self, request, obj): ...
    def response_action(self, request, queryset): ...
    def response_delete(self, request, obj_display, obj_id): ...
    def render_delete_form(self, request, context): ...
    def get_inline_formsets(self, request, formsets, inline_instances, obj: Incomplete | None = None): ...
    def get_changeform_initial_data(self, request): ...
    def changeform_view(self, request, object_id: Incomplete | None = None, form_url: str = '', extra_context: Incomplete | None = None): ...
    def add_view(self, request, form_url: str = '', extra_context: Incomplete | None = None): ...
    def change_view(self, request, object_id, form_url: str = '', extra_context: Incomplete | None = None): ...
    def changelist_view(self, request, extra_context: Incomplete | None = None): ...
    def get_deleted_objects(self, objs, request): ...
    def delete_view(self, request, object_id, extra_context: Incomplete | None = None): ...
    def history_view(self, request, object_id, extra_context: Incomplete | None = None): ...
    def get_formset_kwargs(self, request, obj, inline, prefix): ...

class InlineModelAdmin(BaseModelAdmin):
    model: Incomplete
    fk_name: Incomplete
    formset = BaseInlineFormSet
    extra: int
    min_num: Incomplete
    max_num: Incomplete
    template: Incomplete
    verbose_name: Incomplete
    verbose_name_plural: Incomplete
    can_delete: bool
    show_change_link: bool
    checks_class = InlineModelAdminChecks
    classes: Incomplete
    admin_site: Incomplete
    parent_model: Incomplete
    opts: Incomplete
    has_registered_model: Incomplete
    def __init__(self, parent_model, admin_site) -> None: ...
    @property
    def media(self): ...
    def get_extra(self, request, obj: Incomplete | None = None, **kwargs): ...
    def get_min_num(self, request, obj: Incomplete | None = None, **kwargs): ...
    def get_max_num(self, request, obj: Incomplete | None = None, **kwargs): ...
    def get_formset(self, request, obj: Incomplete | None = None, **kwargs): ...
    def get_queryset(self, request): ...
    def has_add_permission(self, request, obj): ...
    def has_change_permission(self, request, obj: Incomplete | None = None): ...
    def has_delete_permission(self, request, obj: Incomplete | None = None): ...
    def has_view_permission(self, request, obj: Incomplete | None = None): ...

class StackedInline(InlineModelAdmin):
    template: str

class TabularInline(InlineModelAdmin):
    template: str

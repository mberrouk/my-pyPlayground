from _typeshed import Incomplete
from collections.abc import Generator
from django import forms as forms
from django.contrib.admin.utils import display_for_field as display_for_field, flatten_fieldsets as flatten_fieldsets, help_text_for_field as help_text_for_field, label_for_field as label_for_field, lookup_field as lookup_field, quote as quote
from django.core.exceptions import ObjectDoesNotExist as ObjectDoesNotExist
from django.db.models.fields.related import ForeignObjectRel as ForeignObjectRel, ManyToManyRel as ManyToManyRel, OneToOneField as OneToOneField
from django.forms.utils import flatatt as flatatt
from django.template.defaultfilters import capfirst as capfirst, linebreaksbr as linebreaksbr
from django.urls import NoReverseMatch as NoReverseMatch, reverse as reverse
from django.utils.functional import cached_property as cached_property
from django.utils.html import conditional_escape as conditional_escape, format_html as format_html
from django.utils.safestring import mark_safe as mark_safe
from django.utils.translation import gettext as gettext

ACTION_CHECKBOX_NAME: str

class ActionForm(forms.Form):
    action: Incomplete
    select_across: Incomplete

class AdminForm:
    prepopulated_fields: Incomplete
    model_admin: Incomplete
    readonly_fields: Incomplete
    def __init__(self, form, fieldsets, prepopulated_fields, readonly_fields: Incomplete | None = None, model_admin: Incomplete | None = None) -> None: ...
    def __iter__(self): ...
    @property
    def errors(self): ...
    @property
    def non_field_errors(self): ...
    @property
    def fields(self): ...
    @property
    def is_bound(self): ...
    @property
    def media(self): ...

class Fieldset:
    form: Incomplete
    classes: Incomplete
    description: Incomplete
    model_admin: Incomplete
    readonly_fields: Incomplete
    def __init__(self, form, name: Incomplete | None = None, readonly_fields=(), fields=(), classes=(), description: Incomplete | None = None, model_admin: Incomplete | None = None) -> None: ...
    @property
    def media(self): ...
    def is_collapsible(self): ...
    def __iter__(self): ...

class Fieldline:
    form: Incomplete
    fields: Incomplete
    has_visible_field: Incomplete
    model_admin: Incomplete
    readonly_fields: Incomplete
    def __init__(self, form, field, readonly_fields: Incomplete | None = None, model_admin: Incomplete | None = None) -> None: ...
    def __iter__(self): ...
    def errors(self): ...

class AdminField:
    field: Incomplete
    is_first: Incomplete
    is_checkbox: Incomplete
    is_readonly: bool
    def __init__(self, form, field, is_first) -> None: ...
    def label_tag(self): ...
    def errors(self): ...

class AdminReadonlyField:
    field: Incomplete
    form: Incomplete
    model_admin: Incomplete
    is_first: Incomplete
    is_checkbox: bool
    is_readonly: bool
    empty_value_display: Incomplete
    def __init__(self, form, field, is_first, model_admin: Incomplete | None = None) -> None: ...
    def label_tag(self): ...
    def get_admin_url(self, remote_field, remote_obj): ...
    def contents(self): ...

class InlineAdminFormSet:
    opts: Incomplete
    formset: Incomplete
    fieldsets: Incomplete
    model_admin: Incomplete
    readonly_fields: Incomplete
    prepopulated_fields: Incomplete
    classes: Incomplete
    has_add_permission: Incomplete
    has_change_permission: Incomplete
    has_delete_permission: Incomplete
    has_view_permission: Incomplete
    def __init__(self, inline, formset, fieldsets, prepopulated_fields: Incomplete | None = None, readonly_fields: Incomplete | None = None, model_admin: Incomplete | None = None, has_add_permission: bool = True, has_change_permission: bool = True, has_delete_permission: bool = True, has_view_permission: bool = True) -> None: ...
    def __iter__(self): ...
    def fields(self) -> Generator[Incomplete]: ...
    def inline_formset_data(self): ...
    @property
    def forms(self): ...
    def is_collapsible(self): ...
    def non_form_errors(self): ...
    @property
    def is_bound(self): ...
    @property
    def total_form_count(self): ...
    @property
    def media(self): ...

class InlineAdminForm(AdminForm):
    formset: Incomplete
    model_admin: Incomplete
    original: Incomplete
    show_url: Incomplete
    absolute_url: Incomplete
    def __init__(self, formset, form, fieldsets, prepopulated_fields, original, readonly_fields: Incomplete | None = None, model_admin: Incomplete | None = None, view_on_site_url: Incomplete | None = None) -> None: ...
    def __iter__(self): ...
    def needs_explicit_pk_field(self): ...
    def pk_field(self): ...
    def fk_field(self): ...
    def deletion_field(self): ...

class InlineFieldset(Fieldset):
    formset: Incomplete
    def __init__(self, formset, *args, **kwargs) -> None: ...
    def __iter__(self): ...

class AdminErrorList(forms.utils.ErrorList):
    def __init__(self, form, inline_formsets) -> None: ...

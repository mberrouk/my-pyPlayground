from _typeshed import Incomplete
from django.db.models import Func, Index

__all__ = ['BloomIndex', 'BrinIndex', 'BTreeIndex', 'GinIndex', 'GistIndex', 'HashIndex', 'SpGistIndex']

class PostgresIndex(Index):
    def max_name_length(self): ...
    def create_sql(self, model, schema_editor, using: str = '', **kwargs): ...
    def check_supported(self, schema_editor) -> None: ...
    def get_with_params(self): ...

class BloomIndex(PostgresIndex):
    suffix: str
    length: Incomplete
    columns: Incomplete
    def __init__(self, *expressions, length: Incomplete | None = None, columns=(), **kwargs) -> None: ...
    def deconstruct(self): ...
    def get_with_params(self): ...

class BrinIndex(PostgresIndex):
    suffix: str
    autosummarize: Incomplete
    pages_per_range: Incomplete
    def __init__(self, *expressions, autosummarize: Incomplete | None = None, pages_per_range: Incomplete | None = None, **kwargs) -> None: ...
    def deconstruct(self): ...
    def get_with_params(self): ...

class BTreeIndex(PostgresIndex):
    suffix: str
    fillfactor: Incomplete
    deduplicate_items: Incomplete
    def __init__(self, *expressions, fillfactor: Incomplete | None = None, deduplicate_items: Incomplete | None = None, **kwargs) -> None: ...
    def deconstruct(self): ...
    def get_with_params(self): ...

class GinIndex(PostgresIndex):
    suffix: str
    fastupdate: Incomplete
    gin_pending_list_limit: Incomplete
    def __init__(self, *expressions, fastupdate: Incomplete | None = None, gin_pending_list_limit: Incomplete | None = None, **kwargs) -> None: ...
    def deconstruct(self): ...
    def get_with_params(self): ...

class GistIndex(PostgresIndex):
    suffix: str
    buffering: Incomplete
    fillfactor: Incomplete
    def __init__(self, *expressions, buffering: Incomplete | None = None, fillfactor: Incomplete | None = None, **kwargs) -> None: ...
    def deconstruct(self): ...
    def get_with_params(self): ...

class HashIndex(PostgresIndex):
    suffix: str
    fillfactor: Incomplete
    def __init__(self, *expressions, fillfactor: Incomplete | None = None, **kwargs) -> None: ...
    def deconstruct(self): ...
    def get_with_params(self): ...

class SpGistIndex(PostgresIndex):
    suffix: str
    fillfactor: Incomplete
    def __init__(self, *expressions, fillfactor: Incomplete | None = None, **kwargs) -> None: ...
    def deconstruct(self): ...
    def get_with_params(self): ...
    def check_supported(self, schema_editor) -> None: ...

class OpClass(Func):
    template: str
    constraint_validation_compatible: bool
    def __init__(self, expression, name) -> None: ...

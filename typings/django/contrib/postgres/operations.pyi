from _typeshed import Incomplete
from django.contrib.postgres.signals import get_citext_oids as get_citext_oids, get_hstore_oids as get_hstore_oids, register_type_handlers as register_type_handlers
from django.db import NotSupportedError as NotSupportedError, router as router
from django.db.migrations import AddConstraint as AddConstraint, AddIndex as AddIndex, RemoveIndex as RemoveIndex
from django.db.migrations.operations.base import Operation as Operation, OperationCategory as OperationCategory
from django.db.models.constraints import CheckConstraint as CheckConstraint

class CreateExtension(Operation):
    reversible: bool
    category: Incomplete
    name: Incomplete
    def __init__(self, name) -> None: ...
    def state_forwards(self, app_label, state) -> None: ...
    def database_forwards(self, app_label, schema_editor, from_state, to_state) -> None: ...
    def database_backwards(self, app_label, schema_editor, from_state, to_state) -> None: ...
    def extension_exists(self, schema_editor, extension): ...
    def describe(self): ...
    @property
    def migration_name_fragment(self): ...

class BloomExtension(CreateExtension):
    name: str
    def __init__(self) -> None: ...

class BtreeGinExtension(CreateExtension):
    name: str
    def __init__(self) -> None: ...

class BtreeGistExtension(CreateExtension):
    name: str
    def __init__(self) -> None: ...

class CITextExtension(CreateExtension):
    name: str
    def __init__(self) -> None: ...

class CryptoExtension(CreateExtension):
    name: str
    def __init__(self) -> None: ...

class HStoreExtension(CreateExtension):
    name: str
    def __init__(self) -> None: ...

class TrigramExtension(CreateExtension):
    name: str
    def __init__(self) -> None: ...

class UnaccentExtension(CreateExtension):
    name: str
    def __init__(self) -> None: ...

class NotInTransactionMixin: ...

class AddIndexConcurrently(NotInTransactionMixin, AddIndex):
    atomic: bool
    category: Incomplete
    def describe(self): ...
    def database_forwards(self, app_label, schema_editor, from_state, to_state) -> None: ...
    def database_backwards(self, app_label, schema_editor, from_state, to_state) -> None: ...

class RemoveIndexConcurrently(NotInTransactionMixin, RemoveIndex):
    atomic: bool
    category: Incomplete
    def describe(self): ...
    def database_forwards(self, app_label, schema_editor, from_state, to_state) -> None: ...
    def database_backwards(self, app_label, schema_editor, from_state, to_state) -> None: ...

class CollationOperation(Operation):
    name: Incomplete
    locale: Incomplete
    provider: Incomplete
    deterministic: Incomplete
    def __init__(self, name, locale, *, provider: str = 'libc', deterministic: bool = True) -> None: ...
    def state_forwards(self, app_label, state) -> None: ...
    def deconstruct(self): ...
    def create_collation(self, schema_editor) -> None: ...
    def remove_collation(self, schema_editor) -> None: ...

class CreateCollation(CollationOperation):
    category: Incomplete
    def database_forwards(self, app_label, schema_editor, from_state, to_state) -> None: ...
    def database_backwards(self, app_label, schema_editor, from_state, to_state) -> None: ...
    def describe(self): ...
    @property
    def migration_name_fragment(self): ...

class RemoveCollation(CollationOperation):
    category: Incomplete
    def database_forwards(self, app_label, schema_editor, from_state, to_state) -> None: ...
    def database_backwards(self, app_label, schema_editor, from_state, to_state) -> None: ...
    def describe(self): ...
    @property
    def migration_name_fragment(self): ...

class AddConstraintNotValid(AddConstraint):
    category: Incomplete
    def __init__(self, model_name, constraint) -> None: ...
    def describe(self): ...
    def database_forwards(self, app_label, schema_editor, from_state, to_state) -> None: ...
    @property
    def migration_name_fragment(self): ...

class ValidateConstraint(Operation):
    category: Incomplete
    model_name: Incomplete
    name: Incomplete
    def __init__(self, model_name, name) -> None: ...
    def describe(self): ...
    def database_forwards(self, app_label, schema_editor, from_state, to_state) -> None: ...
    def database_backwards(self, app_label, schema_editor, from_state, to_state) -> None: ...
    def state_forwards(self, app_label, state) -> None: ...
    @property
    def migration_name_fragment(self): ...
    def deconstruct(self): ...

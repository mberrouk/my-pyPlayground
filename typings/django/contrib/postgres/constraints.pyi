from _typeshed import Incomplete
from django.db.models import BaseConstraint
from django.db.models.indexes import IndexExpression

__all__ = ['ExclusionConstraint']

class ExclusionConstraintExpression(IndexExpression):
    template: str

class ExclusionConstraint(BaseConstraint):
    template: str
    expressions: Incomplete
    index_type: Incomplete
    condition: Incomplete
    deferrable: Incomplete
    include: Incomplete
    def __init__(self, *, name, expressions, index_type: Incomplete | None = None, condition: Incomplete | None = None, deferrable: Incomplete | None = None, include: Incomplete | None = None, violation_error_code: Incomplete | None = None, violation_error_message: Incomplete | None = None) -> None: ...
    def constraint_sql(self, model, schema_editor): ...
    def create_sql(self, model, schema_editor): ...
    def remove_sql(self, model, schema_editor): ...
    def check_supported(self, schema_editor) -> None: ...
    def deconstruct(self): ...
    def __eq__(self, other): ...
    def validate(self, model, instance, exclude: Incomplete | None = None, using=...) -> None: ...

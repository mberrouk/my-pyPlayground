import hashlib
from _typeshed import Incomplete
from django.conf import settings as settings
from django.core.exceptions import ImproperlyConfigured as ImproperlyConfigured
from django.core.signals import setting_changed as setting_changed
from django.dispatch import receiver as receiver
from django.utils.crypto import RANDOM_STRING_CHARS as RANDOM_STRING_CHARS, constant_time_compare as constant_time_compare, get_random_string as get_random_string, pbkdf2 as pbkdf2
from django.utils.module_loading import import_string as import_string

UNUSABLE_PASSWORD_PREFIX: str
UNUSABLE_PASSWORD_SUFFIX_LENGTH: int

def is_password_usable(encoded): ...
def verify_password(password, encoded, preferred: str = 'default'): ...
def check_password(password, encoded, setter: Incomplete | None = None, preferred: str = 'default'): ...
async def acheck_password(password, encoded, setter: Incomplete | None = None, preferred: str = 'default'): ...
def make_password(password, salt: Incomplete | None = None, hasher: str = 'default'): ...
def get_hashers(): ...
def get_hashers_by_algorithm(): ...
def reset_hashers(*, setting, **kwargs) -> None: ...
def get_hasher(algorithm: str = 'default'): ...
def identify_hasher(encoded): ...
def mask_hash(hash, show: int = 6, char: str = '*'): ...
def must_update_salt(salt, expected_entropy): ...

class BasePasswordHasher:
    algorithm: Incomplete
    library: Incomplete
    salt_entropy: int
    def salt(self): ...
    def verify(self, password, encoded) -> None: ...
    def encode(self, password, salt) -> None: ...
    def decode(self, encoded) -> None: ...
    def safe_summary(self, encoded) -> None: ...
    def must_update(self, encoded): ...
    def harden_runtime(self, password, encoded) -> None: ...

class PBKDF2PasswordHasher(BasePasswordHasher):
    algorithm: str
    iterations: int
    digest = hashlib.sha256
    def encode(self, password, salt, iterations: Incomplete | None = None): ...
    def decode(self, encoded): ...
    def verify(self, password, encoded): ...
    def safe_summary(self, encoded): ...
    def must_update(self, encoded): ...
    def harden_runtime(self, password, encoded) -> None: ...

class PBKDF2SHA1PasswordHasher(PBKDF2PasswordHasher):
    algorithm: str
    digest = hashlib.sha1

class Argon2PasswordHasher(BasePasswordHasher):
    algorithm: str
    library: str
    time_cost: int
    memory_cost: int
    parallelism: int
    def encode(self, password, salt): ...
    def decode(self, encoded): ...
    def verify(self, password, encoded): ...
    def safe_summary(self, encoded): ...
    def must_update(self, encoded): ...
    def harden_runtime(self, password, encoded) -> None: ...
    def params(self): ...

class BCryptSHA256PasswordHasher(BasePasswordHasher):
    algorithm: str
    digest = hashlib.sha256
    library: Incomplete
    rounds: int
    def salt(self): ...
    def encode(self, password, salt): ...
    def decode(self, encoded): ...
    def verify(self, password, encoded): ...
    def safe_summary(self, encoded): ...
    def must_update(self, encoded): ...
    def harden_runtime(self, password, encoded) -> None: ...

class BCryptPasswordHasher(BCryptSHA256PasswordHasher):
    algorithm: str
    digest: Incomplete

class ScryptPasswordHasher(BasePasswordHasher):
    algorithm: str
    block_size: int
    maxmem: int
    parallelism: int
    work_factor: Incomplete
    def encode(self, password, salt, n: Incomplete | None = None, r: Incomplete | None = None, p: Incomplete | None = None): ...
    def decode(self, encoded): ...
    def verify(self, password, encoded): ...
    def safe_summary(self, encoded): ...
    def must_update(self, encoded): ...
    def harden_runtime(self, password, encoded) -> None: ...

class MD5PasswordHasher(BasePasswordHasher):
    algorithm: str
    def encode(self, password, salt): ...
    def decode(self, encoded): ...
    def verify(self, password, encoded): ...
    def safe_summary(self, encoded): ...
    def must_update(self, encoded): ...
    def harden_runtime(self, password, encoded) -> None: ...

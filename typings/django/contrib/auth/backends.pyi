from _typeshed import Incomplete
from django.contrib.auth import get_user_model as get_user_model
from django.contrib.auth.models import Permission as Permission
from django.db.models import Exists as Exists, OuterRef as OuterRef, Q as Q

UserModel: Incomplete

class BaseBackend:
    def authenticate(self, request, **kwargs) -> None: ...
    def get_user(self, user_id) -> None: ...
    def get_user_permissions(self, user_obj, obj: Incomplete | None = None): ...
    def get_group_permissions(self, user_obj, obj: Incomplete | None = None): ...
    def get_all_permissions(self, user_obj, obj: Incomplete | None = None): ...
    def has_perm(self, user_obj, perm, obj: Incomplete | None = None): ...

class ModelBackend(BaseBackend):
    def authenticate(self, request, username: Incomplete | None = None, password: Incomplete | None = None, **kwargs): ...
    def user_can_authenticate(self, user): ...
    def get_user_permissions(self, user_obj, obj: Incomplete | None = None): ...
    def get_group_permissions(self, user_obj, obj: Incomplete | None = None): ...
    def get_all_permissions(self, user_obj, obj: Incomplete | None = None): ...
    def has_perm(self, user_obj, perm, obj: Incomplete | None = None): ...
    def has_module_perms(self, user_obj, app_label): ...
    def with_perm(self, perm, is_active: bool = True, include_superusers: bool = True, obj: Incomplete | None = None): ...
    def get_user(self, user_id): ...

class AllowAllUsersModelBackend(ModelBackend):
    def user_can_authenticate(self, user): ...

class RemoteUserBackend(ModelBackend):
    create_unknown_user: bool
    def authenticate(self, request, remote_user): ...
    def clean_username(self, username): ...
    def configure_user(self, request, user, created: bool = True): ...

class AllowAllUsersRemoteUserBackend(RemoteUserBackend):
    def user_can_authenticate(self, user): ...

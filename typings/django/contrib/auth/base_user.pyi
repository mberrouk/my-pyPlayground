from _typeshed import Incomplete
from collections.abc import Generator
from django.conf import settings as settings
from django.contrib.auth import password_validation as password_validation
from django.contrib.auth.hashers import acheck_password as acheck_password, check_password as check_password, is_password_usable as is_password_usable, make_password as make_password
from django.db import models as models
from django.utils.crypto import salted_hmac as salted_hmac

class BaseUserManager(models.Manager):
    @classmethod
    def normalize_email(cls, email): ...
    def get_by_natural_key(self, username): ...

class AbstractBaseUser(models.Model):
    password: Incomplete
    last_login: Incomplete
    is_active: bool
    REQUIRED_FIELDS: Incomplete
    class Meta:
        abstract: bool
    def save(self, *args, **kwargs) -> None: ...
    def get_username(self): ...
    def clean(self) -> None: ...
    def natural_key(self): ...
    @property
    def is_anonymous(self): ...
    @property
    def is_authenticated(self): ...
    def set_password(self, raw_password) -> None: ...
    def check_password(self, raw_password): ...
    async def acheck_password(self, raw_password): ...
    def set_unusable_password(self) -> None: ...
    def has_usable_password(self): ...
    def get_session_auth_hash(self): ...
    def get_session_auth_fallback_hash(self) -> Generator[Incomplete]: ...
    @classmethod
    def get_email_field_name(cls): ...
    @classmethod
    def normalize_username(cls, username): ...

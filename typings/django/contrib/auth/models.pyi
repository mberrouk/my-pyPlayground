from .validators import UnicodeUsernameValidator as UnicodeUsernameValidator
from _typeshed import Incomplete
from django.apps import apps as apps
from django.contrib import auth as auth
from django.contrib.auth.base_user import AbstractBaseUser as AbstractBaseUser, BaseUserManager as BaseUserManager
from django.contrib.auth.hashers import make_password as make_password
from django.contrib.contenttypes.models import ContentType as ContentType
from django.core.exceptions import PermissionDenied as PermissionDenied
from django.core.mail import send_mail as send_mail
from django.db import models as models
from django.db.models.manager import EmptyManager as EmptyManager
from django.utils import timezone as timezone

def update_last_login(sender, user, **kwargs) -> None: ...

class PermissionManager(models.Manager):
    use_in_migrations: bool
    def get_by_natural_key(self, codename, app_label, model): ...

class Permission(models.Model):
    name: Incomplete
    content_type: Incomplete
    codename: Incomplete
    objects: Incomplete
    class Meta:
        verbose_name: Incomplete
        verbose_name_plural: Incomplete
        unique_together: Incomplete
        ordering: Incomplete
    def natural_key(self): ...

class GroupManager(models.Manager):
    use_in_migrations: bool
    def get_by_natural_key(self, name): ...

class Group(models.Model):
    name: Incomplete
    permissions: Incomplete
    objects: Incomplete
    class Meta:
        verbose_name: Incomplete
        verbose_name_plural: Incomplete
    def natural_key(self): ...

class UserManager(BaseUserManager):
    use_in_migrations: bool
    def create_user(self, username, email: Incomplete | None = None, password: Incomplete | None = None, **extra_fields): ...
    def create_superuser(self, username, email: Incomplete | None = None, password: Incomplete | None = None, **extra_fields): ...
    def with_perm(self, perm, is_active: bool = True, include_superusers: bool = True, backend: Incomplete | None = None, obj: Incomplete | None = None): ...

class PermissionsMixin(models.Model):
    is_superuser: Incomplete
    groups: Incomplete
    user_permissions: Incomplete
    class Meta:
        abstract: bool
    def get_user_permissions(self, obj: Incomplete | None = None): ...
    def get_group_permissions(self, obj: Incomplete | None = None): ...
    def get_all_permissions(self, obj: Incomplete | None = None): ...
    def has_perm(self, perm, obj: Incomplete | None = None): ...
    def has_perms(self, perm_list, obj: Incomplete | None = None): ...
    def has_module_perms(self, app_label): ...

class AbstractUser(AbstractBaseUser, PermissionsMixin):
    username_validator: Incomplete
    username: Incomplete
    first_name: Incomplete
    last_name: Incomplete
    email: Incomplete
    is_staff: Incomplete
    is_active: Incomplete
    date_joined: Incomplete
    objects: Incomplete
    EMAIL_FIELD: str
    USERNAME_FIELD: str
    REQUIRED_FIELDS: Incomplete
    class Meta:
        verbose_name: Incomplete
        verbose_name_plural: Incomplete
        abstract: bool
    def clean(self) -> None: ...
    def get_full_name(self): ...
    def get_short_name(self): ...
    def email_user(self, subject, message, from_email: Incomplete | None = None, **kwargs) -> None: ...

class User(AbstractUser):
    class Meta(AbstractUser.Meta):
        swappable: str

class AnonymousUser:
    id: Incomplete
    pk: Incomplete
    username: str
    is_staff: bool
    is_active: bool
    is_superuser: bool
    def __eq__(self, other): ...
    def __hash__(self): ...
    def __int__(self) -> int: ...
    def save(self) -> None: ...
    def delete(self) -> None: ...
    def set_password(self, raw_password) -> None: ...
    def check_password(self, raw_password) -> None: ...
    @property
    def groups(self): ...
    @property
    def user_permissions(self): ...
    def get_user_permissions(self, obj: Incomplete | None = None): ...
    def get_group_permissions(self, obj: Incomplete | None = None): ...
    def get_all_permissions(self, obj: Incomplete | None = None): ...
    def has_perm(self, perm, obj: Incomplete | None = None): ...
    def has_perms(self, perm_list, obj: Incomplete | None = None): ...
    def has_module_perms(self, module): ...
    @property
    def is_anonymous(self): ...
    @property
    def is_authenticated(self): ...
    def get_username(self): ...

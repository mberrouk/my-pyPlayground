from _typeshed import Incomplete
from django.core.exceptions import ObjectDoesNotExist as ObjectDoesNotExist
from django.db import models as models
from io import StringIO

DEFER_FIELD: Incomplete

class SerializerDoesNotExist(KeyError): ...
class SerializationError(Exception): ...

class DeserializationError(Exception):
    @classmethod
    def WithData(cls, original_exc, model, fk, field_value): ...

class M2MDeserializationError(Exception):
    original_exc: Incomplete
    pk: Incomplete
    def __init__(self, original_exc, pk) -> None: ...

class ProgressBar:
    progress_width: int
    output: Incomplete
    total_count: Incomplete
    prev_done: int
    def __init__(self, output, total_count) -> None: ...
    def update(self, count) -> None: ...

class Serializer:
    internal_use_only: bool
    progress_class = ProgressBar
    stream_class = StringIO
    options: Incomplete
    stream: Incomplete
    selected_fields: Incomplete
    use_natural_foreign_keys: Incomplete
    use_natural_primary_keys: Incomplete
    first: bool
    def serialize(self, queryset, *, stream: Incomplete | None = None, fields: Incomplete | None = None, use_natural_foreign_keys: bool = False, use_natural_primary_keys: bool = False, progress_output: Incomplete | None = None, object_count: int = 0, **options): ...
    def start_serialization(self) -> None: ...
    def end_serialization(self) -> None: ...
    def start_object(self, obj) -> None: ...
    def end_object(self, obj) -> None: ...
    def handle_field(self, obj, field) -> None: ...
    def handle_fk_field(self, obj, field) -> None: ...
    def handle_m2m_field(self, obj, field) -> None: ...
    def getvalue(self): ...

class Deserializer:
    options: Incomplete
    stream: Incomplete
    def __init__(self, stream_or_string, **options) -> None: ...
    def __iter__(self): ...
    def __next__(self) -> None: ...

class DeserializedObject:
    object: Incomplete
    m2m_data: Incomplete
    deferred_fields: Incomplete
    def __init__(self, obj, m2m_data: Incomplete | None = None, deferred_fields: Incomplete | None = None) -> None: ...
    def save(self, save_m2m: bool = True, using: Incomplete | None = None, **kwargs) -> None: ...
    def save_deferred_fields(self, using: Incomplete | None = None) -> None: ...

def build_instance(Model, data, db): ...
def deserialize_m2m_values(field, field_value, using, handle_forward_references): ...
def deserialize_fk_value(field, field_value, using, handle_forward_references): ...

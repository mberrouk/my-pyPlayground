import socketserver
from _typeshed import Incomplete
from wsgiref import simple_server

__all__ = ['WSGIServer', 'WSGIRequestHandler']

class WSGIServer(simple_server.WSGIServer):
    request_queue_size: int
    address_family: Incomplete
    allow_reuse_address: Incomplete
    def __init__(self, *args, ipv6: bool = False, allow_reuse_address: bool = True, **kwargs) -> None: ...
    def handle_error(self, request, client_address) -> None: ...

class ThreadedWSGIServer(socketserver.ThreadingMixIn, WSGIServer):
    daemon_threads: bool
    connections_override: Incomplete
    def __init__(self, *args, connections_override: Incomplete | None = None, **kwargs) -> None: ...
    def process_request_thread(self, request, client_address) -> None: ...
    def close_request(self, request) -> None: ...

class ServerHandler(simple_server.ServerHandler):
    http_version: str
    def __init__(self, stdin, stdout, stderr, environ, **kwargs) -> None: ...
    def cleanup_headers(self) -> None: ...
    def close(self) -> None: ...
    def finish_response(self) -> None: ...

class WSGIRequestHandler(simple_server.WSGIRequestHandler):
    protocol_version: str
    def address_string(self): ...
    def log_message(self, format, *args) -> None: ...
    def get_environ(self): ...
    close_connection: bool
    def handle(self) -> None: ...
    raw_requestline: Incomplete
    requestline: str
    request_version: str
    command: str
    def handle_one_request(self) -> None: ...

from _typeshed import Incomplete
from django.core.cache.backends.base import BaseCache as BaseCache, DEFAULT_TIMEOUT as DEFAULT_TIMEOUT, InvalidCacheKey as InvalidCacheKey, memcache_key_warnings as memcache_key_warnings
from django.utils.functional import cached_property as cached_property

class BaseMemcachedCache(BaseCache):
    LibraryValueNotFoundException: Incomplete
    def __init__(self, server, params, library, value_not_found_exception) -> None: ...
    @property
    def client_servers(self): ...
    def get_backend_timeout(self, timeout=...): ...
    def add(self, key, value, timeout=..., version: Incomplete | None = None): ...
    def get(self, key, default: Incomplete | None = None, version: Incomplete | None = None): ...
    def set(self, key, value, timeout=..., version: Incomplete | None = None) -> None: ...
    def touch(self, key, timeout=..., version: Incomplete | None = None): ...
    def delete(self, key, version: Incomplete | None = None): ...
    def get_many(self, keys, version: Incomplete | None = None): ...
    def close(self, **kwargs) -> None: ...
    def incr(self, key, delta: int = 1, version: Incomplete | None = None): ...
    def set_many(self, data, timeout=..., version: Incomplete | None = None): ...
    def delete_many(self, keys, version: Incomplete | None = None) -> None: ...
    def clear(self) -> None: ...
    def validate_key(self, key) -> None: ...

class PyLibMCCache(BaseMemcachedCache):
    def __init__(self, server, params) -> None: ...
    @property
    def client_servers(self): ...
    def touch(self, key, timeout=..., version: Incomplete | None = None): ...
    def close(self, **kwargs) -> None: ...

class PyMemcacheCache(BaseMemcachedCache):
    def __init__(self, server, params) -> None: ...

from _typeshed import Incomplete
from collections.abc import Generator
from django.core.exceptions import ImproperlyConfigured as ImproperlyConfigured
from django.utils.module_loading import import_string as import_string

class InvalidCacheBackendError(ImproperlyConfigured): ...
class CacheKeyWarning(RuntimeWarning): ...
class InvalidCacheKey(ValueError): ...

DEFAULT_TIMEOUT: Incomplete
MEMCACHE_MAX_KEY_LENGTH: int

def default_key_func(key, key_prefix, version): ...
def get_key_func(key_func): ...

class BaseCache:
    default_timeout: Incomplete
    key_prefix: Incomplete
    version: Incomplete
    key_func: Incomplete
    def __init__(self, params) -> None: ...
    def get_backend_timeout(self, timeout=...): ...
    def make_key(self, key, version: Incomplete | None = None): ...
    def validate_key(self, key) -> None: ...
    def make_and_validate_key(self, key, version: Incomplete | None = None): ...
    def add(self, key, value, timeout=..., version: Incomplete | None = None) -> None: ...
    async def aadd(self, key, value, timeout=..., version: Incomplete | None = None): ...
    def get(self, key, default: Incomplete | None = None, version: Incomplete | None = None) -> None: ...
    async def aget(self, key, default: Incomplete | None = None, version: Incomplete | None = None): ...
    def set(self, key, value, timeout=..., version: Incomplete | None = None) -> None: ...
    async def aset(self, key, value, timeout=..., version: Incomplete | None = None): ...
    def touch(self, key, timeout=..., version: Incomplete | None = None) -> None: ...
    async def atouch(self, key, timeout=..., version: Incomplete | None = None): ...
    def delete(self, key, version: Incomplete | None = None) -> None: ...
    async def adelete(self, key, version: Incomplete | None = None): ...
    def get_many(self, keys, version: Incomplete | None = None): ...
    async def aget_many(self, keys, version: Incomplete | None = None): ...
    def get_or_set(self, key, default, timeout=..., version: Incomplete | None = None): ...
    async def aget_or_set(self, key, default, timeout=..., version: Incomplete | None = None): ...
    def has_key(self, key, version: Incomplete | None = None): ...
    async def ahas_key(self, key, version: Incomplete | None = None): ...
    def incr(self, key, delta: int = 1, version: Incomplete | None = None): ...
    async def aincr(self, key, delta: int = 1, version: Incomplete | None = None): ...
    def decr(self, key, delta: int = 1, version: Incomplete | None = None): ...
    async def adecr(self, key, delta: int = 1, version: Incomplete | None = None): ...
    def __contains__(self, key) -> bool: ...
    def set_many(self, data, timeout=..., version: Incomplete | None = None): ...
    async def aset_many(self, data, timeout=..., version: Incomplete | None = None): ...
    def delete_many(self, keys, version: Incomplete | None = None) -> None: ...
    async def adelete_many(self, keys, version: Incomplete | None = None) -> None: ...
    def clear(self) -> None: ...
    async def aclear(self): ...
    def incr_version(self, key, delta: int = 1, version: Incomplete | None = None): ...
    async def aincr_version(self, key, delta: int = 1, version: Incomplete | None = None): ...
    def decr_version(self, key, delta: int = 1, version: Incomplete | None = None): ...
    async def adecr_version(self, key, delta: int = 1, version: Incomplete | None = None): ...
    def close(self, **kwargs) -> None: ...
    async def aclose(self, **kwargs) -> None: ...

memcached_error_chars_re: Incomplete

def memcache_key_warnings(key) -> Generator[Incomplete]: ...

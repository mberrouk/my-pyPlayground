from _typeshed import Incomplete
from django.conf import settings as settings
from django.core.mail.utils import DNS_NAME as DNS_NAME
from django.utils.encoding import force_str as force_str, punycode as punycode
from email.mime.message import MIMEMessage
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

utf8_charset: Incomplete
utf8_charset_qp: Incomplete
DEFAULT_ATTACHMENT_MIME_TYPE: str
RFC5322_EMAIL_LINE_LENGTH_LIMIT: int

class BadHeaderError(ValueError): ...

ADDRESS_HEADERS: Incomplete

def forbid_multi_line_headers(name, val, encoding): ...
def sanitize_address(addr, encoding): ...

class MIMEMixin:
    def as_string(self, unixfrom: bool = False, linesep: str = '\n'): ...
    def as_bytes(self, unixfrom: bool = False, linesep: str = '\n'): ...

class SafeMIMEMessage(MIMEMixin, MIMEMessage):
    def __setitem__(self, name, val) -> None: ...

class SafeMIMEText(MIMEMixin, MIMEText):
    encoding: Incomplete
    def __init__(self, _text, _subtype: str = 'plain', _charset: Incomplete | None = None) -> None: ...
    def __setitem__(self, name, val) -> None: ...
    def set_payload(self, payload, charset: Incomplete | None = None) -> None: ...

class SafeMIMEMultipart(MIMEMixin, MIMEMultipart):
    encoding: Incomplete
    def __init__(self, _subtype: str = 'mixed', boundary: Incomplete | None = None, _subparts: Incomplete | None = None, encoding: Incomplete | None = None, **_params) -> None: ...
    def __setitem__(self, name, val) -> None: ...

class EmailMessage:
    content_subtype: str
    mixed_subtype: str
    encoding: Incomplete
    to: Incomplete
    cc: Incomplete
    bcc: Incomplete
    reply_to: Incomplete
    from_email: Incomplete
    subject: Incomplete
    body: Incomplete
    attachments: Incomplete
    extra_headers: Incomplete
    connection: Incomplete
    def __init__(self, subject: str = '', body: str = '', from_email: Incomplete | None = None, to: Incomplete | None = None, bcc: Incomplete | None = None, connection: Incomplete | None = None, attachments: Incomplete | None = None, headers: Incomplete | None = None, cc: Incomplete | None = None, reply_to: Incomplete | None = None) -> None: ...
    def get_connection(self, fail_silently: bool = False): ...
    def message(self): ...
    def recipients(self): ...
    def send(self, fail_silently: bool = False): ...
    def attach(self, filename: Incomplete | None = None, content: Incomplete | None = None, mimetype: Incomplete | None = None) -> None: ...
    def attach_file(self, path, mimetype: Incomplete | None = None) -> None: ...

class EmailMultiAlternatives(EmailMessage):
    alternative_subtype: str
    alternatives: Incomplete
    def __init__(self, subject: str = '', body: str = '', from_email: Incomplete | None = None, to: Incomplete | None = None, bcc: Incomplete | None = None, connection: Incomplete | None = None, attachments: Incomplete | None = None, headers: Incomplete | None = None, alternatives: Incomplete | None = None, cc: Incomplete | None = None, reply_to: Incomplete | None = None) -> None: ...
    def attach_alternative(self, content, mimetype) -> None: ...

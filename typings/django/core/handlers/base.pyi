from .exception import convert_exception_to_response as convert_exception_to_response
from _typeshed import Incomplete
from django.conf import settings as settings
from django.core.exceptions import ImproperlyConfigured as ImproperlyConfigured, MiddlewareNotUsed as MiddlewareNotUsed
from django.core.signals import request_finished as request_finished
from django.db import connections as connections, transaction as transaction
from django.urls import get_resolver as get_resolver, set_urlconf as set_urlconf
from django.utils.log import log_response as log_response
from django.utils.module_loading import import_string as import_string

logger: Incomplete

class BaseHandler:
    def load_middleware(self, is_async: bool = False) -> None: ...
    def adapt_method_mode(self, is_async, method, method_is_async: Incomplete | None = None, debug: bool = False, name: Incomplete | None = None): ...
    def get_response(self, request): ...
    async def get_response_async(self, request): ...
    def resolve_request(self, request): ...
    def check_response(self, response, callback, name: Incomplete | None = None) -> None: ...
    def make_view_atomic(self, view): ...
    def process_exception_by_middleware(self, exception, request): ...

def reset_urlconf(sender, **kwargs) -> None: ...

from _typeshed import Incomplete
from collections.abc import Generator
from django.conf import settings as settings
from django.core import signals as signals
from django.core.exceptions import RequestAborted as RequestAborted, RequestDataTooBig as RequestDataTooBig
from django.core.handlers import base as base
from django.http import FileResponse as FileResponse, HttpRequest as HttpRequest, HttpResponse as HttpResponse, HttpResponseBadRequest as HttpResponseBadRequest, HttpResponseServerError as HttpResponseServerError, QueryDict as QueryDict, parse_cookie as parse_cookie
from django.urls import set_script_prefix as set_script_prefix
from django.utils.functional import cached_property as cached_property

logger: Incomplete

def get_script_prefix(scope): ...

class ASGIRequest(HttpRequest):
    body_receive_timeout: int
    scope: Incomplete
    resolver_match: Incomplete
    path: Incomplete
    script_name: Incomplete
    path_info: Incomplete
    method: Incomplete
    META: Incomplete
    def __init__(self, scope, body_file) -> None: ...
    def GET(self): ...
    POST: Incomplete
    FILES: Incomplete
    def COOKIES(self): ...
    def close(self) -> None: ...

class ASGIHandler(base.BaseHandler):
    request_class = ASGIRequest
    chunk_size: Incomplete
    def __init__(self) -> None: ...
    async def __call__(self, scope, receive, send) -> None: ...
    async def handle(self, scope, receive, send): ...
    async def listen_for_disconnect(self, receive) -> None: ...
    async def run_get_response(self, request): ...
    async def read_body(self, receive): ...
    def create_request(self, scope, body_file): ...
    def handle_uncaught_exception(self, request, resolver, exc_info): ...
    async def send_response(self, response, send) -> None: ...
    @classmethod
    def chunk_bytes(cls, data) -> Generator[Incomplete]: ...

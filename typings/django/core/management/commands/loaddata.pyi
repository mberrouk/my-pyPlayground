import zipfile
from _typeshed import Incomplete
from django.apps import apps as apps
from django.conf import settings as settings
from django.core import serializers as serializers
from django.core.exceptions import ImproperlyConfigured as ImproperlyConfigured
from django.core.management.base import BaseCommand as BaseCommand, CommandError as CommandError
from django.core.management.color import no_style as no_style
from django.core.management.utils import parse_apps_and_model_labels as parse_apps_and_model_labels
from django.db import DEFAULT_DB_ALIAS as DEFAULT_DB_ALIAS, DatabaseError as DatabaseError, IntegrityError as IntegrityError, connections as connections, router as router, transaction as transaction
from django.utils.functional import cached_property as cached_property

has_bz2: bool
has_lzma: bool
READ_STDIN: str

class Command(BaseCommand):
    help: str
    missing_args_message: str
    def add_arguments(self, parser) -> None: ...
    ignore: Incomplete
    using: Incomplete
    app_label: Incomplete
    verbosity: Incomplete
    format: Incomplete
    def handle(self, *fixture_labels, **options) -> None: ...
    def compression_formats(self): ...
    def reset_sequences(self, connection, models) -> None: ...
    fixture_count: int
    loaded_object_count: int
    fixture_object_count: int
    models: Incomplete
    serialization_formats: Incomplete
    objs_with_deferred_fields: Incomplete
    def loaddata(self, fixture_labels) -> None: ...
    def save_obj(self, obj): ...
    def load_label(self, fixture_label) -> None: ...
    def get_fixture_name_and_dirs(self, fixture_name): ...
    def get_targets(self, fixture_name, ser_fmt, cmp_fmt): ...
    def find_fixture_files_in_dir(self, fixture_dir, fixture_name, targets): ...
    def find_fixtures(self, fixture_label): ...
    def fixture_dirs(self): ...
    def parse_name(self, fixture_name): ...

class SingleZipReader(zipfile.ZipFile):
    def __init__(self, *args, **kwargs) -> None: ...
    def read(self): ...

def humanize(dirname): ...

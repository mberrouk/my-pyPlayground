from .base import Storage
from .mixins import StorageSettingsMixin
from _typeshed import Incomplete
from django.core.files.base import ContentFile

__all__ = ['InMemoryStorage']

class TimingMixin: ...

class InMemoryFileNode(ContentFile, TimingMixin):
    file: Incomplete
    def __init__(self, content: str = '', name: str = '') -> None: ...
    def open(self, mode): ...
    def write(self, data) -> None: ...

class InMemoryDirNode(TimingMixin):
    def __init__(self) -> None: ...
    def resolve(self, path, create_if_missing: bool = False, leaf_cls: Incomplete | None = None, check_exists: bool = True): ...
    def listdir(self): ...
    def remove_child(self, name) -> None: ...

class InMemoryStorage(Storage, StorageSettingsMixin):
    def __init__(self, location: Incomplete | None = None, base_url: Incomplete | None = None, file_permissions_mode: Incomplete | None = None, directory_permissions_mode: Incomplete | None = None) -> None: ...
    def base_location(self): ...
    def location(self): ...
    def base_url(self): ...
    def file_permissions_mode(self): ...
    def directory_permissions_mode(self): ...
    def path(self, name): ...
    def delete(self, name) -> None: ...
    def exists(self, name): ...
    def listdir(self, path): ...
    def size(self, name): ...
    def url(self, name): ...
    def get_accessed_time(self, name): ...
    def get_created_time(self, name): ...
    def get_modified_time(self, name): ...

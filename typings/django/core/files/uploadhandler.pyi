from _typeshed import Incomplete

__all__ = ['UploadFileException', 'StopUpload', 'SkipFile', 'FileUploadHandler', 'TemporaryFileUploadHandler', 'MemoryFileUploadHandler', 'load_handler', 'StopFutureHandlers']

class UploadFileException(Exception): ...

class StopUpload(UploadFileException):
    connection_reset: Incomplete
    def __init__(self, connection_reset: bool = False) -> None: ...

class SkipFile(UploadFileException): ...
class StopFutureHandlers(UploadFileException): ...

class FileUploadHandler:
    chunk_size: Incomplete
    file_name: Incomplete
    content_type: Incomplete
    content_length: Incomplete
    charset: Incomplete
    content_type_extra: Incomplete
    request: Incomplete
    def __init__(self, request: Incomplete | None = None) -> None: ...
    def handle_raw_input(self, input_data, META, content_length, boundary, encoding: Incomplete | None = None) -> None: ...
    field_name: Incomplete
    def new_file(self, field_name, file_name, content_type, content_length, charset: Incomplete | None = None, content_type_extra: Incomplete | None = None) -> None: ...
    def receive_data_chunk(self, raw_data, start) -> None: ...
    def file_complete(self, file_size) -> None: ...
    def upload_complete(self) -> None: ...
    def upload_interrupted(self) -> None: ...

class TemporaryFileUploadHandler(FileUploadHandler):
    file: Incomplete
    def new_file(self, *args, **kwargs) -> None: ...
    def receive_data_chunk(self, raw_data, start) -> None: ...
    def file_complete(self, file_size): ...
    def upload_interrupted(self) -> None: ...

class MemoryFileUploadHandler(FileUploadHandler):
    activated: Incomplete
    def handle_raw_input(self, input_data, META, content_length, boundary, encoding: Incomplete | None = None) -> None: ...
    file: Incomplete
    def new_file(self, *args, **kwargs) -> None: ...
    def receive_data_chunk(self, raw_data, start): ...
    def file_complete(self, file_size): ...

def load_handler(path, *args, **kwargs): ...

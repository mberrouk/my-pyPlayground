from _typeshed import Incomplete
from collections.abc import Generator
from django.conf import settings as settings
from django.http import Http404 as Http404, HttpResponse as HttpResponse, HttpResponseNotFound as HttpResponseNotFound
from django.template import Context as Context, Engine as Engine, TemplateDoesNotExist as TemplateDoesNotExist
from django.template.defaultfilters import pprint as pprint
from django.urls import resolve as resolve
from django.utils import timezone as timezone
from django.utils.datastructures import MultiValueDict as MultiValueDict
from django.utils.encoding import force_str as force_str
from django.utils.module_loading import import_string as import_string
from django.utils.version import PY311 as PY311, get_docs_version as get_docs_version
from django.views.decorators.debug import coroutine_functions_to_sensitive_variables as coroutine_functions_to_sensitive_variables

DEBUG_ENGINE: Incomplete

def builtin_template_path(name): ...

class ExceptionCycleWarning(UserWarning): ...

class CallableSettingWrapper:
    def __init__(self, callable_setting) -> None: ...

def technical_500_response(request, exc_type, exc_value, tb, status_code: int = 500): ...
def get_default_exception_reporter_filter(): ...
def get_exception_reporter_filter(request): ...
def get_exception_reporter_class(request): ...
def get_caller(request): ...

class SafeExceptionReporterFilter:
    cleansed_substitute: str
    hidden_settings: Incomplete
    def cleanse_setting(self, key, value): ...
    def get_safe_settings(self): ...
    def get_safe_request_meta(self, request): ...
    def get_safe_cookies(self, request): ...
    def is_active(self, request): ...
    def get_cleansed_multivaluedict(self, request, multivaluedict): ...
    def get_post_parameters(self, request): ...
    def cleanse_special_types(self, request, value): ...
    def get_traceback_frame_variables(self, request, tb_frame): ...

class ExceptionReporter:
    @property
    def html_template_path(self): ...
    @property
    def text_template_path(self): ...
    request: Incomplete
    filter: Incomplete
    exc_type: Incomplete
    exc_value: Incomplete
    tb: Incomplete
    is_email: Incomplete
    template_info: Incomplete
    template_does_not_exist: bool
    postmortem: Incomplete
    def __init__(self, request, exc_type, exc_value, tb, is_email: bool = False) -> None: ...
    def get_traceback_data(self): ...
    def get_traceback_html(self): ...
    def get_traceback_text(self): ...
    def get_traceback_frames(self): ...
    def get_exception_traceback_frames(self, exc_value, tb) -> Generator[Incomplete]: ...

def technical_404_response(request, exception): ...
def default_urlconf(request): ...

from _typeshed import Incomplete
from django.core.exceptions import ImproperlyConfigured as ImproperlyConfigured
from django.core.paginator import InvalidPage as InvalidPage, Paginator as Paginator
from django.db.models import QuerySet as QuerySet
from django.http import Http404 as Http404
from django.views.generic.base import ContextMixin as ContextMixin, TemplateResponseMixin as TemplateResponseMixin, View as View

class MultipleObjectMixin(ContextMixin):
    allow_empty: bool
    queryset: Incomplete
    model: Incomplete
    paginate_by: Incomplete
    paginate_orphans: int
    context_object_name: Incomplete
    paginator_class = Paginator
    page_kwarg: str
    ordering: Incomplete
    def get_queryset(self): ...
    def get_ordering(self): ...
    def paginate_queryset(self, queryset, page_size): ...
    def get_paginate_by(self, queryset): ...
    def get_paginator(self, queryset, per_page, orphans: int = 0, allow_empty_first_page: bool = True, **kwargs): ...
    def get_paginate_orphans(self): ...
    def get_allow_empty(self): ...
    def get_context_object_name(self, object_list): ...
    def get_context_data(self, *, object_list: Incomplete | None = None, **kwargs): ...

class BaseListView(MultipleObjectMixin, View):
    object_list: Incomplete
    def get(self, request, *args, **kwargs): ...

class MultipleObjectTemplateResponseMixin(TemplateResponseMixin):
    template_name_suffix: str
    def get_template_names(self): ...

class ListView(MultipleObjectTemplateResponseMixin, BaseListView): ...

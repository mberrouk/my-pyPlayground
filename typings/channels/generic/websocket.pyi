from ..consumer import AsyncConsumer as AsyncConsumer, SyncConsumer as SyncConsumer
from ..db import aclose_old_connections as aclose_old_connections
from ..exceptions import AcceptConnection as AcceptConnection, DenyConnection as DenyConnection, InvalidChannelLayerError as InvalidChannelLayerError, StopConsumer as StopConsumer
from _typeshed import Incomplete

class WebsocketConsumer(SyncConsumer):
    groups: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def websocket_connect(self, message) -> None: ...
    def connect(self) -> None: ...
    def accept(self, subprotocol: Incomplete | None = None, headers: Incomplete | None = None) -> None: ...
    def websocket_receive(self, message) -> None: ...
    def receive(self, text_data: Incomplete | None = None, bytes_data: Incomplete | None = None) -> None: ...
    def send(self, text_data: Incomplete | None = None, bytes_data: Incomplete | None = None, close: bool = False) -> None: ...
    def close(self, code: Incomplete | None = None, reason: Incomplete | None = None) -> None: ...
    def websocket_disconnect(self, message) -> None: ...
    def disconnect(self, code) -> None: ...

class JsonWebsocketConsumer(WebsocketConsumer):
    def receive(self, text_data: Incomplete | None = None, bytes_data: Incomplete | None = None, **kwargs) -> None: ...
    def receive_json(self, content, **kwargs) -> None: ...
    def send_json(self, content, close: bool = False) -> None: ...
    @classmethod
    def decode_json(cls, text_data): ...
    @classmethod
    def encode_json(cls, content): ...

class AsyncWebsocketConsumer(AsyncConsumer):
    groups: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    async def websocket_connect(self, message) -> None: ...
    async def connect(self) -> None: ...
    async def accept(self, subprotocol: Incomplete | None = None, headers: Incomplete | None = None) -> None: ...
    async def websocket_receive(self, message) -> None: ...
    async def receive(self, text_data: Incomplete | None = None, bytes_data: Incomplete | None = None) -> None: ...
    async def send(self, text_data: Incomplete | None = None, bytes_data: Incomplete | None = None, close: bool = False) -> None: ...
    async def close(self, code: Incomplete | None = None, reason: Incomplete | None = None) -> None: ...
    async def websocket_disconnect(self, message) -> None: ...
    async def disconnect(self, code) -> None: ...

class AsyncJsonWebsocketConsumer(AsyncWebsocketConsumer):
    async def receive(self, text_data: Incomplete | None = None, bytes_data: Incomplete | None = None, **kwargs) -> None: ...
    async def receive_json(self, content, **kwargs) -> None: ...
    async def send_json(self, content, close: bool = False) -> None: ...
    @classmethod
    async def decode_json(cls, text_data): ...
    @classmethod
    async def encode_json(cls, content): ...

"""
This type stub file was generated by pyright.
"""

import functools
from django.utils.functional import cached_property

"""
This type stub file was generated by pyright.
"""
class ResolverMatch:
    def __init__(self, func, args, kwargs, url_name=..., app_names=..., namespaces=..., route=..., tried=..., captured_kwargs=..., extra_kwargs=...) -> None:
        ...
    
    def __getitem__(self, index):
        ...
    
    def __repr__(self):
        ...
    
    def __reduce_ex__(self, protocol):
        ...
    


def get_resolver(urlconf=...):
    ...

@functools.cache
def get_ns_resolver(ns_pattern, resolver, converters):
    ...

class LocaleRegexDescriptor:
    def __get__(self, instance, cls=...):
        """
        Return a compiled regular expression based on the active language.
        """
        ...
    


class CheckURLMixin:
    def describe(self):
        """
        Format the URL pattern for display in warning messages.
        """
        ...
    


class RegexPattern(CheckURLMixin):
    regex = ...
    def __init__(self, regex, name=..., is_endpoint=...) -> None:
        ...
    
    def match(self, path):
        ...
    
    def check(self):
        ...
    
    def __str__(self) -> str:
        ...
    


_PATH_PARAMETER_COMPONENT_RE = ...
whitespace_set = ...
class LocaleRegexRouteDescriptor:
    def __get__(self, instance, cls=...):
        """
        Return a compiled regular expression based on the active language.
        """
        ...
    


class RoutePattern(CheckURLMixin):
    regex = ...
    def __init__(self, route, name=..., is_endpoint=...) -> None:
        ...
    
    def match(self, path):
        ...
    
    def check(self):
        ...
    
    def __str__(self) -> str:
        ...
    


class LocalePrefixPattern:
    def __init__(self, prefix_default_language=...) -> None:
        ...
    
    @property
    def regex(self):
        ...
    
    @property
    def language_prefix(self):
        ...
    
    def match(self, path):
        ...
    
    def check(self):
        ...
    
    def describe(self):
        ...
    
    def __str__(self) -> str:
        ...
    


class URLPattern:
    def __init__(self, pattern, callback, default_args=..., name=...) -> None:
        ...
    
    def __repr__(self):
        ...
    
    def check(self):
        ...
    
    def resolve(self, path):
        ...
    
    @cached_property
    def lookup_str(self):
        """
        A string that identifies the view (e.g. 'path.to.view_function' or
        'path.to.ClassBasedView').
        """
        ...
    


class URLResolver:
    def __init__(self, pattern, urlconf_name, default_kwargs=..., app_name=..., namespace=...) -> None:
        ...
    
    def __repr__(self):
        ...
    
    def check(self):
        ...
    
    @property
    def reverse_dict(self):
        ...
    
    @property
    def namespace_dict(self):
        ...
    
    @property
    def app_dict(self):
        ...
    
    def resolve(self, path):
        ...
    
    @cached_property
    def urlconf_module(self):
        ...
    
    @cached_property
    def url_patterns(self):
        ...
    
    def resolve_error_handler(self, view_type):
        ...
    
    def reverse(self, lookup_view, *args, **kwargs):
        ...
    



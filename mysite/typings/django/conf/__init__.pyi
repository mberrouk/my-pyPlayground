"""
This type stub file was generated by pyright.
"""

import importlib
import os
import time
import traceback
import warnings
import django
from pathlib import Path
from django.conf import global_settings
from django.core.exceptions import ImproperlyConfigured
from django.utils.deprecation import RemovedInDjango60Warning
from django.utils.functional import LazyObject, empty

"""
This type stub file was generated by pyright.
"""
ENVIRONMENT_VARIABLE = ...
DEFAULT_STORAGE_ALIAS = ...
STATICFILES_STORAGE_ALIAS = ...
FORMS_URLFIELD_ASSUME_HTTPS_DEPRECATED_MSG = ...
class SettingsReference(str):
    """
    String subclass which references a current settings value. It's treated as
    the value in memory but serializes to a settings.NAME attribute reference.
    """
    def __new__(self, value, setting_name):
        ...
    
    def __init__(self, value, setting_name) -> None:
        ...
    


class LazySettings(LazyObject):
    """
    A lazy proxy for either global Django settings or a custom settings object.
    The user can manually configure settings prior to using them. Otherwise,
    Django uses the settings module pointed to by DJANGO_SETTINGS_MODULE.
    """
    def __repr__(self):
        ...
    
    def __getattr__(self, name):
        """Return the value of a setting and cache it in self.__dict__."""
        ...
    
    def __setattr__(self, name, value):
        """
        Set the value of setting. Clear all cached values if _wrapped changes
        (@override_settings does this) or clear single values when set.
        """
        ...
    
    def __delattr__(self, name):
        """Delete a setting and clear it from cache if needed."""
        ...
    
    def configure(self, default_settings=..., **options):
        """
        Called to manually configure the settings. The 'default_settings'
        parameter sets where to retrieve any unspecified values from (its
        argument must support attribute access (__getattr__)).
        """
        ...
    
    @property
    def configured(self):
        """Return True if the settings have already been configured."""
        ...
    


class Settings:
    def __init__(self, settings_module) -> None:
        ...
    
    def is_overridden(self, setting):
        ...
    
    def __repr__(self):
        ...
    


class UserSettingsHolder:
    """Holder for user configured settings."""
    SETTINGS_MODULE = ...
    def __init__(self, default_settings) -> None:
        """
        Requests for configuration variables not in this class are satisfied
        from the module specified in default_settings (if possible).
        """
        ...
    
    def __getattr__(self, name):
        ...
    
    def __setattr__(self, name, value):
        ...
    
    def __delattr__(self, name):
        ...
    
    def __dir__(self):
        ...
    
    def is_overridden(self, setting):
        ...
    
    def __repr__(self):
        ...
    


settings = ...
